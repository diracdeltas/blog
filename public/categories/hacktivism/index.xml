<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>discrete blogarithm</title>
    <link>https://diracdeltas.github.io/blog/categories/hacktivism/index.xml</link>
    <description>Recent content on discrete blogarithm</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://diracdeltas.github.io/blog/categories/hacktivism/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>xychelsea</title>
      <link>https://diracdeltas.github.io/blog/xychelsea/</link>
      <pubDate>Wed, 25 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/xychelsea/</guid>
      <description>&lt;p class=&#34;p1&#34;&gt;
  On the day that I am scheduled to see my friend Chelsea for the first time in six years, I wake up at 4:51pm to a shrieking fire alarm in my hotel room. Semi-conscious and disoriented, I leap out of bed and spin around wildly grabbing at all the things I care about &amp;#8211; my phone and passport, the precious slip of paper that will allow me entrance to Fort Leavenworth prison, the bag of quarters that Chelsea asked me to bring &amp;#8211; ready for an FBI raid disguised as a fire drill. Before I finish putting on shoes, the alarm stops. Slowly the wave of paranoia in my stomach grinds to a halt.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  I make myself be still and breathe for a moment, reabsorbing my surroundings. I’m standing on the fourth floor of a modest hotel on the edge of Fort Leavenworth, Kansas. Outside the window looms a blue-grey sky, a vast horizon dense and textured like charcoal mixed with cream. The land is flat, green, fertile, midwestern. A hot humid river is all that separates us from Missouri. To people like Chelsea and me, who grew up in Oklahoma and Missouri before running away to sharp-edged cities by the sea, this place feels simultaneously homelike and suffocating.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  As boring as Kansas is, you have to award it points for charm. Ex: a steakhouse across from the old Ft Leavenworth prison proudly proclaims itself “The Little Steak House Across from the Big House,” betraying no awareness of dark irony. The prison staff are all exceedingly polite and helpful, even when they are reprimanding me for not having a driver’s license, even when the receptionist mistakenly refers to Chelsea as “he” over a dozen times in a 5 minute phone call. “Now you go and have yourself a good day, honey,” they say in a warm-hued drawl as I navigate another step in the military bureaucracy, inching closer to actually being able to see Chelsea.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  For the curious, here is approximately the process I went through to gain visitation access to the Ft Leavenworth Disciplinary Barracks:
&lt;/p&gt;

&lt;p&gt;&lt;li class=&#34;p1&#34;&gt;
  &lt;strong&gt;December 2015&lt;/strong&gt;: Chelsea adds me to her list of telephone contacts and starts the application process for my visitation, which requires evidence that we were acquainted prior to her confinement.
&lt;/li&gt;
&lt;li class=&#34;p1&#34;&gt;
  &lt;strong&gt;March/April 2016&lt;/strong&gt;: I receive a letter notifying me that my visitation was approved but a background check is required prior to the visit. Over the course of a week or two, I called at least five different offices at Fort Leavenworth to inquire about how to do the background check before flying to Kansas. Nobody really knew, so I gave up and just booked a flight.
&lt;/li&gt;
&lt;li class=&#34;p1&#34;&gt;
  &lt;strong&gt;May 2016&lt;/strong&gt;: After confirming via phone that I was on the Fort Leavenworth visit schedule, I fly to Kansas City. My trip companions and I check in at the Visitor Control Center to register our vehicle and get access passes to the fort. One of us is denied for having a non-US passport. The other two of us are given passes promptly and without background checks. After that, the two of us are free to drive on and off the army base.
&lt;/li&gt;&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  If all goes well, I will be Chelsea’s first visitor since her sister in November.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  At 6:20pm on May 24, we drive into Fort Leavenworth for the first time. I am surprised to discover that it is full of grassy fields, lush tree-lined sidewalks, and pastel suburban houses, not at all like a place where you would put a military prison. I wave at some joggers.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  At 6:50pm, we finally find the United States Discipline Barracks, home of Chelsea’s prison cell. I walk inside and follow the signs to the visitation area. There are rules for visitation printed on the wall, which I’ve read a half-dozen times (no low-cut clothing, no short pants or skirts, 5 sheets of paper allowed, pencils and pens allowed, quarters and cash allowed in a transparent ziplock bag, no WiFi-enabled devices, no jackets, no cameras). The guard is friendly and makes light conversation with me, like all the Fort Leavenworth staff members I’ve interacted with so far. How bizarre to think that these friendly people, dripping with syrup-thick midwestern hospitality, are the same people keeping Chelsea forcibly isolated from the outside world for the next three decades.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  I force out a weak smile, explain my visitation purpose in my a faintly-artificial Missouri accent. The guard sees me on the visit schedule but is concerned that my shirt doesn’t have sleeves. Apparently sleeveless shirts are not allowed, even though this isn’t printed anywhere in the rules. Fuck. He goes to consult another officer. I nervously fidget.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  Thankfully, it is decided that I am allowed to enter (though I must wear a sleeved shirt next time). They let me through the metal detector after inspecting my 5 sheets of paper and ziplock bag containing 6 pencils, 1 pen, and $10 in quarters. I am flooded with relief, which quickly washes away into nervousness as I enter the visit room where Chelsea, my friend who I haven’t seen in six years, who I thought I would never see again after her arrest, is supposedly waiting.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  She’s not there. Instead there’s just some grey tables and chairs, depressingly few of which are occupied by inmates and their sad-looking visitors.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  And then the door opens and she walks in.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  We run towards each other.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  We hug, and my eyes fill with tears.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  When something that you’ve convinced yourself will never happen is finally happening, there’s a moment when your brain starts to panic and desperately record every detail, fearing that this is all an illusion that will soon dissolve without a trace. So I looked at her as if I would never see her again, my heart sinking with the realization that there will probably never exist a photo of Chelsea Manning, age 28, for the world to see. It made me sad, because she looks nothing like any of the photos of her on the Internet. She looked like a hero, brighter and stronger than in all my memories, radiant with a light that makes no sense.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  She was wearing a brown prison uniform that was too big for her small frame and smiling ear-to-ear. Her hair was neatly combed in a short pixieish cut, no longer than the 2-inch maximum allowed by the prison. Despite everything, she looked even younger than I remembered, with glowing skin and large blue eyes framed by elegant cheekbones. We beamingly smiled at each other for several seconds, suspended in disbelief and joy.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  “So do you wanna sit down?” I say. We find a table, and smile some more, and then I ask if she wants anything from the vending machines. “Sure, I’ll get something I’m not usually able to get,” she says, picking a Mountain Dew. I pay for it using 6 quarters from my ziplock bag. I also try to buy her some sour cream-flavored chips, but the snacks machine is broken, which makes me unusually angry. I make a mental reminder to ask the prison staff to fix it.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  We sit back down and talk for most of two hours without pausing. We talk about life in prison, where she spends 40 hours a week working in a wood shop and somehow finds time to take college correspondence courses, read journals, write a column for The Guardian, and work with lawyers on her appeal. We talk about her growing interest in post-quantum cryptography and the collection of books building up in her cell. We talk about the last time we met and what our mutual friends are up to nowadays. We talk about our complex relationships with family. We talk about my shoes (which she likes a lot) and the kind of music that she used to DJ. We talk about where she would live if she weren’t in prison. We talk about how she find motivation to keep going every day, even though some days her life feels unfair and hopeless. Many times, I am speechlessly awed by her curiosity and perseverance in the face of extremely messed-up, depressing circumstances.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  I bring up her recent appeal to reduce her sentence from 35 years to 10 years, and she seems worried that it didn’t receive enough coverage in the press. She hopes that the world hasn’t forgotten about her.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  I’m not sure what to say. Like others, I feel guilty for not doing more to raise public awareness for her case. Maybe if I’d spoken up more about how her sentence was grossly unjust, or written about the importance of her trial as a precedent for all whistleblowers, she’d be in a better place now. Instead all I could do was sit and chat with her, drinking soda in a sterile grey room while someone’s toddler screamed and cried at the table next to us.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  Before I realize it, it&amp;#8217;s 9:25pm and the guard is yelling at us that our time is up. Chelsea, a self-identified extrovert, seems sad that I’m leaving, even though I’ll be back in 22 hours for my second and last day of visitation. We say our goodbyes and hug each other, holding the embrace longer this time.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  Back outside, I stand and watch the inmates’ families pile into their cars and drive home. Some of them live near the prison so they can visit their imprisoned loved one every day. I think about how strange it is that Chelsea is a hero to thousands if not millions of people, but there is nobody who does this for her. If she&amp;#8217;s lucky, she&amp;#8217;ll receive one more visit from a friend this year.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  I don’t want us to forget her at least.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  Update (5/26/16): Obligatory reminder that you can support Chelsea by donating to her &lt;a href=&#34;https://freedom.press/chelsea&#34;&gt;defense fund&lt;/a&gt;, &lt;a href=&#34;https://www.chelseamanning.org/learn-more/write-to-chelsea-manning&#34;&gt;writing her a letter&lt;/a&gt; (she reads every single one she receives), and following her accounts on &lt;a href=&#34;https://twitter.com/xychelsea&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@xychelsea&#34;&gt;Medium&lt;/a&gt;. In addition, &lt;a href=&#34;https://www.chelseamanning.org/resources/organizing-kit&#34;&gt;this page&lt;/a&gt; has a nice toolkit for organizers to support her cause.
&lt;/p&gt;

&lt;p class=&#34;p1&#34;&gt;
  Update (6/02/16): &lt;a href=&#34;https://diracdeltas.github.io/blog/xychelsea-part-2&#34;&gt;Part 2&lt;/a&gt; of this story is up for those who want to keep reading.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sniffly</title>
      <link>https://diracdeltas.github.io/blog/sniffly/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/sniffly/</guid>
      <description>&lt;p&gt;Every so often, I get sick of basically everything. Walls become suffocating, routine is insufferable, and the city I live in wraps itself against the sky like a cage. So inevitably I duck away and find something to chase (warm faces, the light in autumn, half-formed schemes, etc.), run until I&amp;#8217;m dizzy and lost and can&amp;#8217;t remember whose couch I&amp;#8217;m waking up on or why I crashed there. Weeks later, the sky bruises into swollen dusk, some familiar voice yells for me to come home so I run back into my bed once again, wondering if home is this place more than it is the feeling of staring at an unfamiliar timetable and noticing your heartbeat quicken.&lt;/p&gt;

&lt;p&gt;This kinda happened last month so I took a 4 week leave (2 paid, 2 unpaid) from my job to read books, work on open source projects, and couchsurf the East Coast. I spent a lot of rainy days curled up on a friend&amp;#8217;s bed in Somerville, MA poking at my laptop, idle afternoons hiding in a corner of the MIT library poking at my laptop, and long electric evenings walking around New York City looking for a place to sit and poke at my laptop. A lot of laptop-poking happened while on &amp;#8220;vacation&amp;#8221; because I had promised some people that I would give two talks in October, one at &lt;a href=&#34;http://secretcon.com/&#34; target=&#34;_blank&#34;&gt;SecretCon&lt;/a&gt; and one at &lt;a href=&#34;http://sandiego.toorcon.net/&#34; target=&#34;_blank&#34;&gt;ToorCon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Predictably, I put off the ToorCon talk until 2 weeks ago. Also predictably, I started panicking and not sleeping anymore because I said I would show people a new browser fingerprinting technique which did not exist. Somehow, after a lot of head-banging-against-desk, I came up with one that sort-of worked about a week before the ToorCon and actually finished the code right before ToorCon. I named it &lt;a href=&#34;https://github.com/diracdeltas/sniffly&#34; target=&#34;_blank&#34;&gt;Sniffly&lt;/a&gt; because it sniffs browser history, and also because I was coming down with a cold.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s how Sniffly works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A user visits the Sniffly page.&lt;/li&gt;
&lt;li&gt;Their browser attempts to load images from various HSTS domains over HTTP. These domains were harvested from a scrape of HSTS domains in the Alexa Top 1M. It was really fun to write this scraper; I finally had a chance to use Python&amp;#8217;s Twisted!&lt;/li&gt;
&lt;li&gt;Sniffly sets a CSP policy that restricts images to HTTP, so image sources are blocked before they are redirected to HTTPS. This is crucial, because If the browser completes a request to the HTTPS site, then it will receive the HSTS pin, and the attack will no longer work when the user visits Sniffly.&lt;/li&gt;
&lt;li&gt;When an image gets blocked by CSP, its &lt;code&gt;onerror&lt;/code&gt; handler is called. In this case, the &lt;code&gt;onerror &lt;/code&gt;handler does some fancy tricks to semi-reliably time how long it took for  the image to be redirected from HTTP to HTTPS. If this time is on the order of a millisecond, it was an HSTS redirect (no network request was made), which means the user has visited the image&amp;#8217;s domain before. If it&amp;#8217;s on the order of 100 milliseconds, then a network request probably occurred, meaning that the user hasn&amp;#8217;t visited the image&amp;#8217;s domain.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://zyan.scripts.mit.edu/sniffly/&#34; target=&#34;_blank&#34;&gt;Here&amp;#8217;s a quick demo&lt;/a&gt;. It only works in recent Chrome/Firefox versions when HTTPS Everywhere is disabled. The results also turn up a lot of false positives if you are running an adblocker, since ad-blocked domains are indistinguishable from HSTS-blocked domains from a timing perspective. (However, since HTTPS Everywhere domains and ad-blocked domains are mostly the same for every user, they can simply be subtracted out to get more accurate results for users who run these browser extensions.) I didn&amp;#8217;t collect analytics on the site, but random testing with several friends showed a ~80% accuracy rate in the demo once browser extensions were accounted for.&lt;/p&gt;

&lt;p&gt;For more info, check out the &lt;a href=&#34;https://github.com/diracdeltas/sniffly&#34; target=&#34;_blank&#34;&gt;source code&lt;/a&gt;, &lt;a href=&#34;https://zyan.scripts.mit.edu/presentations/toorcon2015.pdf&#34; target=&#34;_blank&#34;&gt;ToorCon slides&lt;/a&gt; (pdf), and &lt;a href=&#34;https://www.youtube.com/watch?v=kk2GkZv6Wjs&#34; target=&#34;_blank&#34;&gt;talk recording&lt;/a&gt;. Someone submitted the demo to &lt;a href=&#34;https://news.ycombinator.com/item?id=10455735&#34; target=&#34;_blank&#34;&gt;Hacker News&lt;/a&gt; and, to my horror, it was the #1 link for 6+ hours yesterday (!). I feel bewildered that this kind of attention is being granted (&lt;a href=&#34;https://zyan.scripts.mit.edu/blog/backdooring-js/&#34; target=&#34;_blank&#34;&gt;again&lt;/a&gt;) to random side projects that I do alone in my spare time, but I guess I should take whatever validation I can get right now. It would be sweet if people looked at my work and paid me to hack on interesting stuff for the public so i never had to work a real job again. Maybe someday it&amp;#8217;ll happen; until then I&amp;#8217;ll prolly hold down a day job and take more fake vacations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: As of March 2016, Sniffly (CVE-2016-1617) has been fixed in the major browsers. Thank you Uncle Google for the bug bounty $$.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>backdooring your javascript using minifier bugs</title>
      <link>https://diracdeltas.github.io/blog/backdooring-js/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/backdooring-js/</guid>
      <description>

&lt;p&gt;In addition to unforgettable life experiences and personal growth, one thing I got out of DEF CON 23 was a copy of &lt;a href=&#34;https://www.alchemistowl.org/pocorgtfo/&#34;&gt;POC||GTFO 0x08&lt;/a&gt; from Travis Goodspeed. The coolest article I&amp;#8217;ve read so far in it is &amp;#8220;Deniable Backdoors Using Compiler Bugs,&amp;#8221; in which the authors abused a pre-existing bug in CLANG to create a backdoored version of sudo that allowed any user to gain root access. This is very sneaky, because nobody could prove that their patch to sudo was a backdoor by examining the source code; instead, the privilege escalation backdoor is inserted at compile-time by certain (buggy) versions of CLANG.&lt;/p&gt;

&lt;p&gt;That got me thinking about whether you could use the same backdoor technique on javascript. JS runs pretty much everywhere these days (browsers, servers, &lt;a href=&#34;http://postscapes.com/javascript-and-the-internet-of-things&#34;&gt;arduinos and robots&lt;/a&gt;, maybe even cars someday) but it&amp;#8217;s an interpreted language, not compiled. However, it&amp;#8217;s quite common to minify and optimize JS to reduce file size and improve performance. Perhaps that gives us enough room to insert a backdoor by abusing a JS &lt;em&gt;minifier.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;part-i-finding-a-good-minifier-bug&#34;&gt;Part I: Finding a good minifier bug&lt;/h3&gt;

&lt;p&gt;Question: Do popular JS minifiers really have bugs that could lead to security problems?&lt;/p&gt;

&lt;p&gt;Answer: After about 10 minutes of searching, I found one in &lt;a href=&#34;https://github.com/mishoo/UglifyJS2&#34;&gt;UglifyJS&lt;/a&gt;, a popular minifier used by jQuery to build a script that runs on something like &lt;a href=&#34;http://blog.jquery.com/2014/01/13/the-state-of-jquery-2014/&#34;&gt;70% of the top websites&lt;/a&gt; on the Internet. The &lt;a href=&#34;https://github.com/mishoo/UglifyJS2/issues/751&#34;&gt;bug itself&lt;/a&gt;, fixed in the 2.4.24 release, is straightforward but not totally obvious, so let&amp;#8217;s walk through it.&lt;/p&gt;

&lt;p&gt;UglifyJS does a bunch of things to try to reduce file size. One of the compression flags that is on-by-default will compress expressions such as:&lt;/p&gt;

&lt;pre&gt;!a &amp;&amp; !b &amp;&amp; !c &amp;&amp; !d
&lt;/pre&gt;

&lt;p&gt;That expression is 20 characters. Luckily, if we apply &lt;a href=&#34;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&#34;&gt;De Morgan&amp;#8217;s Law&lt;/a&gt;, we can rewrite it as:&lt;/p&gt;

&lt;pre&gt;!(a || b || c || d)
&lt;/pre&gt;

&lt;p&gt;which is only 19 characters. Sweet! Except that De Morgan&amp;#8217;s Law doesn&amp;#8217;t necessarily work if any of the subexpressions has a non-Boolean return value. For instance,&lt;/p&gt;

&lt;pre&gt;!false &amp;&amp; 1
&lt;/pre&gt;

&lt;p&gt;will return the number 1. On the other hand,&lt;/p&gt;

&lt;pre&gt;!(false || !1)
&lt;/pre&gt;

&lt;p&gt;simply returns true.&lt;/p&gt;

&lt;p&gt;So if we can trick the minifier into erroneously applying De Morgan&amp;#8217;s law, we can make the program behave differently before and after minification! Turns out it&amp;#8217;s not too hard to trick UglifyJS 2.4.23 into doing this, since it will always use the rewritten expression if it is shorter than the original. (UglifyJS 2.4.24 patches this by making sure that subexpressions are boolean before attempting to rewrite.)&lt;/p&gt;

&lt;h3 id=&#34;part-ii-building-a-backdoor-in-some-hypothetical-auth-code&#34;&gt;Part II: Building a backdoor in some hypothetical auth code&lt;/h3&gt;

&lt;p&gt;Cool, we&amp;#8217;ve found the minifier bug of our dreams. Now let&amp;#8217;s try to abuse it!&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s say that you are working for some company, and you want to deliberately create vulnerabilities in their Node.js website. You are tasked with writing some server-side javascript that validates whether user auth tokens are expired. First you make sure that the Node package uses uglify-js@2.4.23, which has the bug that we care about.&lt;/p&gt;

&lt;p&gt;Next you write the token validation function, inserting a bunch of plausible-looking config and user validation checks to force the minifier to compress the long (not-)boolean expression:&lt;/p&gt;

&lt;pre&gt;function isTokenValid(user) {
    var timeLeft =
        !!config &amp;&amp; // config object exists
        !!user.token &amp;&amp; // user object has a token
        !user.token.invalidated &amp;&amp; // token is not explicitly invalidated
        !config.uninitialized &amp;&amp; // config is initialized
        !config.ignoreTimestamps &amp;&amp; // don&#39;t ignore timestamps
        getTimeLeft(user.token.expiry); // &amp;gt; 0 if expiration is in the future

    // The token must not be expired
    return timeLeft &amp;gt; 0;
}

function getTimeLeft(expiry) {
  return expiry - getSystemTime();
}
&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;uglifyjs -c&lt;/code&gt; on the snippet above produces the following:&lt;/p&gt;

&lt;pre&gt;function isTokenValid(user){var timeLeft=!(!config||!user.token||user.token.invalidated||config.uninitialized||config.ignoreTimestamps||!getTimeLeft(user.token.expiry));return timeLeft&amp;gt;0}function getTimeLeft(expiry){return expiry-getSystemTime()}&lt;/pre&gt;

&lt;p&gt;In the original form, if the config and user checks pass, &lt;code&gt;timeLeft&lt;/code&gt; is a negative integer if the token is expired. In the minified form, &lt;code&gt;timeLeft&lt;/code&gt; must be a boolean (since &amp;#8220;!&amp;#8221; in JS does type-coercion to booleans). In fact, if the config and user checks pass, the value of &lt;code&gt;timeLeft&lt;/code&gt; is always &lt;code&gt;true&lt;/code&gt; unless &lt;code&gt;getTimeLeft&lt;/code&gt; coincidentally happens to be 0.&lt;/p&gt;

&lt;p&gt;Voila! Since &lt;code&gt;true &amp;gt; 0&lt;/code&gt; in javascript (yay for type coercion!), auth tokens that are past their expiration time will still be valid forever.&lt;/p&gt;

&lt;h3 id=&#34;part-iii-backdooring-jquery&#34;&gt;Part III: Backdooring jQuery&lt;/h3&gt;

&lt;p&gt;Next let&amp;#8217;s abuse our favorite minifier bug to write some patches to jQuery itself that could lead to backdoors. We&amp;#8217;ll work with &lt;a href=&#34;https://github.com/jquery/jquery/tree/1.11.3&#34;&gt;jQuery 1.11.3&lt;/a&gt;, which is the current jQuery 1 stable release as of this writing.&lt;/p&gt;

&lt;p&gt;jQuery 1.11.3 uses &lt;a href=&#34;https://github.com/jquery/jquery/blob/1.11.3/package.json#L39&#34;&gt;grunt-contrib-uglify 0.3.2&lt;/a&gt; for minification, which in turn depends on &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-uglify/blob/v0.3.2/package.json#L30&#34;&gt;uglify-js ~2.4.0&lt;/a&gt;. So uglify-js@2.4.23 satisfies the dependency, and we can manually edit package.json in grunt-contrib-uglify to force it to use this version.&lt;/p&gt;

&lt;p&gt;There are only a handful of places in jQuery where the DeMorgan&amp;#8217;s Law rewrite optimization is triggered. None of these cause bugs, so we&amp;#8217;ll have to add some ourselves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backdoor Patch #1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First let&amp;#8217;s add a potential backdoor in jQuery&amp;#8217;s .html() method. The &lt;a href=&#34;https://github.com/diracdeltas/jquery/commit/e50c8ce26736027386aa7a698baeca7740a54a0b&#34;&gt;patch&lt;/a&gt; looks weird and superfluous, but we can convince anyone that it shouldn&amp;#8217;t actually change what the method does. Indeed, pre-minification, the unit tests pass.&lt;/p&gt;

&lt;p&gt;After minification with uglify-js@2.4.23, jQuery&amp;#8217;s .html() method will set the inner HTML to &amp;#8220;true&amp;#8221; instead of the provided value, so a bunch of tests fail.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.35.48-PM.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-670&#34; src=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.35.48-PM.png&#34; alt=&#34;Screen Shot 2015-08-23 at 1.35.48 PM&#34; width=&#34;844&#34; height=&#34;785&#34; srcset=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.35.48-PM.png 844w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.35.48-PM-300x279.png 300w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.35.48-PM-624x580.png 624w&#34; sizes=&#34;(max-width: 844px) 100vw, 844px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, the jQuery maintainers are probably using the patched version of uglifyjs. Indeed, tests pass with uglify-js@2.4.24, so this patch might not seem too suspicious.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.39.47-PM.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-671&#34; src=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.39.47-PM.png&#34; alt=&#34;Screen Shot 2015-08-23 at 1.39.47 PM&#34; width=&#34;1057&#34; height=&#34;281&#34; srcset=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.39.47-PM.png 1057w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.39.47-PM-300x80.png 300w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.39.47-PM-1024x272.png 1024w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-1.39.47-PM-624x166.png 624w&#34; sizes=&#34;(max-width: 1057px) 100vw, 1057px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool. Now let&amp;#8217;s run grunt to build jQuery with this patch and write some silly code that triggers the backdoor:&lt;/p&gt;

&lt;pre&gt;&amp;lt;html&amp;gt;
    &amp;lt;script src=&#34;../dist/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;button&amp;gt;click me to see if this site is safe&amp;lt;/button&amp;gt;
    &amp;lt;script&amp;gt;
        $(&#39;button&#39;).click(function(e) {
            $(&#39;#result&#39;).html(&#39;&amp;lt;b&amp;gt;false!!&amp;lt;/b&amp;gt;&#39;);
        });
    &amp;lt;/script&amp;gt;
    &amp;lt;div id=&#39;result&#39;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Here&amp;#8217;s the result of clicking that button when we run the pre-minified jQuery build:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.44.45-PM.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-672&#34; src=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.44.45-PM.png&#34; alt=&#34;Screen Shot 2015-08-23 at 4.44.45 PM&#34; width=&#34;511&#34; height=&#34;449&#34; srcset=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.44.45-PM.png 511w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.44.45-PM-300x264.png 300w&#34; sizes=&#34;(max-width: 511px) 100vw, 511px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As expected, the user is warned that the site is not safe. Which is ironic, because it doesn&amp;#8217;t use our minifier-triggered backdoor.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s what happens when we instead use the minified jQuery build:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.45.10-PM.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-673&#34; src=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.45.10-PM.png&#34; alt=&#34;Screen Shot 2015-08-23 at 4.45.10 PM&#34; width=&#34;505&#34; height=&#34;465&#34; srcset=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.45.10-PM.png 505w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.45.10-PM-300x276.png 300w&#34; sizes=&#34;(max-width: 505px) 100vw, 505px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now users will totally think that this site is safe even when the site authors are trying to warn them otherwise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backdoor Patch #2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first backdoor might be too easy to detect, since anyone using it will probably notice that a bunch of HTML is being set to the string &amp;#8220;true&amp;#8221; instead of the HTML that they want to set. So our &lt;a href=&#34;https://github.com/diracdeltas/jquery/commit/a2092d8a85474c90e2e4d306a21a14af55365b58&#34;&gt;second backdoor patch&lt;/a&gt; is one that only gets triggered in unusual cases.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-7.48.14-PM.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-675&#34; src=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-7.48.14-PM.png&#34; alt=&#34;Screen Shot 2015-08-23 at 7.48.14 PM&#34; width=&#34;1020&#34; height=&#34;313&#34; srcset=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-7.48.14-PM.png 1020w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-7.48.14-PM-300x92.png 300w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-7.48.14-PM-624x191.png 624w&#34; sizes=&#34;(max-width: 1020px) 100vw, 1020px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, we&amp;#8217;ve modified jQuery.event.remove (used in the .off() method) so that the code path that calls &lt;a href=&#34;https://learn.jquery.com/events/event-extensions/&#34;&gt;special event removal hooks&lt;/a&gt; never gets reached after minification. (Since &lt;code&gt;spliced&lt;/code&gt; is always boolean, its length is always undefined, which is not &amp;gt; 0.) This doesn&amp;#8217;t necessarily change the behavior of a site unless the developer has defined such a hook.&lt;/p&gt;

&lt;p&gt;Say that the site we want to backdoor has the following HTML:&lt;/p&gt;

&lt;pre&gt;&amp;lt;html&amp;gt;
    &amp;lt;script src=&#34;../dist/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;button&amp;gt;click me to see if special event handlers are called!&amp;lt;/button&amp;gt;
    &amp;lt;div&amp;gt;FAIL&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        // Add a special event hook for onclick removal
        jQuery.event.special.click.remove = function(handleObj) {
            $(&#39;div&#39;).text(&#39;SUCCESS&#39;);
        };
        $(&#39;button&#39;).click(function myHandler(e) {
            // Trigger the special event hook
            $(&#39;button&#39;).off(&#39;click&#39;);
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;If we run it with unminified jQuery, the removal hook gets called as expected:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.10-PM.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-677&#34; src=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.10-PM.png&#34; alt=&#34;Screen Shot 2015-08-23 at 4.43.10 PM&#34; width=&#34;705&#34; height=&#34;545&#34; srcset=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.10-PM.png 705w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.10-PM-300x232.png 300w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.10-PM-624x482.png 624w&#34; sizes=&#34;(max-width: 705px) 100vw, 705px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the removal hook never gets called if we use the minified build:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.42-PM.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-678&#34; src=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.42-PM.png&#34; alt=&#34;Screen Shot 2015-08-23 at 4.43.42 PM&#34; width=&#34;714&#34; height=&#34;544&#34; srcset=&#34;https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.42-PM.png 714w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.42-PM-300x229.png 300w, https://zyan.scripts.mit.edu/blog/wp-content/uploads/2015/08/Screen-Shot-2015-08-23-at-4.43.42-PM-624x475.png 624w&#34; sizes=&#34;(max-width: 714px) 100vw, 714px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously this is bad news if the event removal hook does some security-critical function, like checking if an origin is whitelisted before passing a user&amp;#8217;s auth token to it.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The backdoor examples that I&amp;#8217;ve illustrated are pretty contrived, but the fact that they can exist at all should probably worry JS developers. Although JS minifiers are not nearly as complex or important as C++ compilers, they have power over a lot of the code that ends up running on the web.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s good that UglifyJS has added test cases for &lt;a href=&#34;https://github.com/mishoo/UglifyJS2/blob/master/test/compress/issue-751.js&#34;&gt;known bugs&lt;/a&gt;, but I would still advise anyone who uses a non-formally verified minifier to be wary. Don&amp;#8217;t minify/compress server-side code unless you have to, and make sure you run browser tests/scans against code post-minification. [Addendum: Don&amp;#8217;t forget that even if you aren&amp;#8217;t using a minifier, your CDN might minify files in production for you. For instance, Cloudflare&amp;#8217;s collapsify &lt;a href=&#34;https://github.com/cloudflare/collapsify/commit/e59253193282f2047eea1c770be57cb10c3c4a3a&#34;&gt;uses uglifyjs&lt;/a&gt;.]&lt;/p&gt;

&lt;p&gt;Now, back to reading the rest of POC||GTFO.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: If you have thoughts or ideas for future PoC, please leave a comment or find me on Twitter (&lt;a href=&#34;https://twitter.com/bcrypt&#34;&gt;@bcrypt&lt;/a&gt;). The code from this blog post is up on &lt;a href=&#34;https://github.com/diracdeltas/jquery&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[Update 1: Thanks @joshssharp for posting this to Hacker News. I&amp;#8217;m flattered to have been on the front page allllll night long (cue 70&amp;#8217;s soul music). Bonus points &amp;#8211; the thread taught me &lt;a href=&#34;https://news.ycombinator.com/item?id=10108672&#34;&gt;something surprising&lt;/a&gt; about why it would make sense to minify server-side.]&lt;/p&gt;

&lt;p&gt;[Update 2: There is now a &lt;a href=&#34;https://lists.debian.org/debian-devel/2015/08/msg00427.html&#34;&gt;long thread&lt;/a&gt; about minifiers on debian-devel which spawned &lt;a href=&#34;https://wiki.debian.org/onlyjob/no-minification&#34;&gt;this wiki page&lt;/a&gt; and &lt;a href=&#34;https://news.ycombinator.com/item?id=10146157&#34;&gt;another HN thread&lt;/a&gt;. It&amp;#8217;s cool that JS developers are paying attention to this class of potential security vulnerabilities, but I hope that people complaining about minification also consider transpilers and other JS pseudo-compilers. I&amp;#8217;ll talk more about that in a future blog post.]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pseudorandom podcast series, episode 1</title>
      <link>https://diracdeltas.github.io/blog/pseudorandom-podcast-series-episode-1/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/pseudorandom-podcast-series-episode-1/</guid>
      <description>&lt;p&gt;The combination of my roommate starting a Rust podcast and a long, animated conversation with a (drunk) storyteller last night caused me to become suddenly enamored with the idea of starting my own lil&amp;#8217; podcast. Lately I keep thinking about how many spontaneous, insightful conversations are never remembered, much less entombed in a publicly-accessible server for posterity. So a podcast seemed like an excellent way to share these moments without spending a lot of time writing (I&amp;#8217;m a regrettably slow writer). I&amp;#8217;d simply bring folks into my warehouse living room, give them a beverage of their choice, and spend a leisurely hour chatting about whatever miscellaneous topics came to mind.&lt;/p&gt;

&lt;p&gt;And so, wasting no time, today I asked my ex-ex-colleague Peter Eckersley if he would like to be my first podcast guest. Peter runs the technology projects team at the Electronic Frontier Foundation and, more importantly, lives 3 blocks away from me. Fortuitously, Peter agreed to have me over for a chat later this afternoon.&lt;/p&gt;

&lt;p&gt;When I arrived, it turned out that one of Peter&amp;#8217;s housemates was having friends over for dinner, so finding a quiet spot became a challenge. We ended up in a tiny room at the back of his house where every flat surface was covered in sewing equipment and sundry household items. As Peter grabbed a hammer to reconstruct the only available chair in the room, I set up my laptop and fancy (borrowed) podcast microphone. We gathered around as close as we could and hit the record button.&lt;/p&gt;

&lt;p&gt;Except for one hiccup where Audacity decided to stop recording abruptly, the interview went smoothly and didn&amp;#8217;t need much editing. Next time I&amp;#8217;ll plan to put myself closer to the mic, do a longer intro, and maybe cut the length down to 15 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://soundcloud.com/bcrypt/pseudorandom-podcast-episode-1&#34; target=&#34;_blank&#34;&gt;Here is the result&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Overall, I had a fun time recording this podcast and am unduly excited about future episodes. Turns out a podcast takes ~10% of the time to write a blog post with the same content. 🙂&lt;/p&gt;

&lt;p&gt;For this and future episodes in the Pseudorandom Podcast Series, here&amp;#8217;s an &lt;a href=&#34;http://feeds.soundcloud.com/users/soundcloud:users:156877463/sounds.rss&#34; target=&#34;_blank&#34;&gt;RSS feed&lt;/a&gt;. I&amp;#8217;m going to reach SoundCloud&amp;#8217;s limit of 180 minutes real quick at this rate, so I will probably host these somewhere else in the future or start a microfunding campaign to pay $15/month.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>solving boolean satisfiability on human circuits</title>
      <link>https://diracdeltas.github.io/blog/2sat/</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/2sat/</guid>
      <description>&lt;p&gt;I remember quite clearly sitting in Scott Aaronson&amp;#8217;s computability and complexity theory &lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-045j-automata-computability-and-complexity-spring-2011/&#34;&gt;course&lt;/a&gt; at MIT in 2011. I was a 19 year-old physics major back then, so Scott&amp;#8217;s class was mostly new and fascinating.&lt;/p&gt;

&lt;p&gt;One spring day, Scott was at the chalkboard delightedly introducing the concept of time complexity classes to us, with the same delight he used when introducing most abstract constructs. He said that you could categorize algorithms into time complexity classes based on the amount of time they take to run as a function of the input length. For instance, you could prove that certain decision problems couldn&amp;#8217;t be solved by a deterministic Turing machine in polynomial time. I raised my hand.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Yes?&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;But time is reference-frame dependent! What if you ran the deterministic Turing machine on earth while you yourself were on a rocket going at relativistic speeds?&amp;#8221;&lt;/p&gt;

&lt;p&gt;Scott&amp;#8217;s eyes lit up. &amp;#8220;Aha!&amp;#8221; he said, without pause. &amp;#8220;Suppose you traveled faster as the input length increased, so from your perspective, a problem in EXP is decidable in polynomial time. However you would be using more and more energy to propel your spaceship. So there is necessarily a tradeoff in the resources needed to solve the problem.&amp;#8221;&lt;/p&gt;

&lt;p&gt;In retrospect, this was pretty characteristic of why I liked the class so much. Scott didn&amp;#8217;t give the easy and useless answer, which would have been that *by our definition* all running times are measured in a fixed inertial reference frame. Instead he reminds us that we, as humans, ultimately care about the totality of resources needed to solve a problem. Time complexity analysis is just one step toward grasping at how hard, how expensive, how painful something really is; mired as we may be in mathematical formalism, the reality of our dying planet and unpaid bills stays within sight when Scott lectures.&lt;/p&gt;

&lt;p&gt;All this came to mind when I read Scott&amp;#8217;s now-infamous &lt;a href=&#34;http://www.scottaaronson.com/blog/?p=2091#comment-326664&#34;&gt;blog comment&lt;/a&gt; about growing up as a shy, self-proclaimed and self-hating male nerd; followed by the much-cited &lt;a href=&#34;http://www.newstatesman.com/laurie-penny/on-nerd-entitlement-rebel-alliance-empire&#34;&gt;response&lt;/a&gt; from journalist Laurie Penny about growing up as a shy, self-proclaimed and self-hating female nerd; followed by Scott&amp;#8217;s latest &lt;a href=&#34;http://www.scottaaronson.com/blog/?p=2119&#34;&gt;blog post&lt;/a&gt; clarifying what he believes about feminism and the plight of shy nerdy people anguished by sexual frustration. What suprised me about the latter was that Scott went so far as to write:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;How to help all the young male nerds I meet who suffer from this problem, in a way that passes feminist muster, and that triggers the world’s sympathy rather than outrage, is a problem that interests me as much as P vs. NP, and right now that seems about equally hard.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&amp;#8220;As much as P vs NP&amp;#8221;?! Remember that Scott once bet his house on the invalidity of a paper claiming to prove P != NP, cf. &lt;a href=&#34;http://www.scottaaronson.com/blog/?p=456&#34;&gt;http://www.scottaaronson.com/blog/?p=456&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Sometimes I think that the obvious step towards solving the problem Scott mentions is for the frustrated person to politely and non-expectantly inform the other person of his/her desires. In an ideal world, they would then discuss them until reaching an amicable resolution, at which point they can return to platonically multiplying tensors or whatever.&lt;/p&gt;

&lt;p&gt;But I suppose part of the definition of shy is the fear of exposing yourself to untrusted parties, for which they can reject you, humiliate you, and otherwise destroy that which you value or at least begrudgingly tolerate. Sadly, the shyness of analytical minds seems justified, because pretty much nobody has worked out how to communicate rejection without passing unfair judgement or otherwise patterning poisonous behavior. There is an art to divulging hidden feelings, an art to giving rejection, an art to handling sadness graciously, and an art to growing friendships from tenuous beginnings. None of these are taught to adolescent humans. Instead, we learn to hide ourselves and shame others.&lt;/p&gt;

&lt;p&gt;I feel unprepared to write anything resembling a guide on how to do this, having recoiled from human contact for most of my life thanks to shyness, but I think it&amp;#8217;s well worth some human brain cycles. Here&amp;#8217;s hoping to live in a culture of rejection-positivity.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HOPEX</title>
      <link>https://diracdeltas.github.io/blog/hopex/</link>
      <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/hopex/</guid>
      <description>&lt;p&gt;4 years ago, I went to &lt;a href=&#34;http://www.hope.net&#34;&gt;HOPE&lt;/a&gt; for the first time on a last-minute press pass from my &lt;a href=&#34;http://tech.mit.edu/&#34;&gt;college newspaper&lt;/a&gt;. Some relevant facts about the trip:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was 19 and had never been to a hacker con before.&lt;/li&gt;
&lt;li&gt;I didn&amp;#8217;t identify as a hacker (or an activist).&lt;/li&gt;
&lt;li&gt;I was too shy to talk to anyone the entire time. Combined with the fact that I knew only a few people there, I was mostly off by myself.&lt;/li&gt;
&lt;li&gt;HOPE that year was the pinnacle of paranoia in probably the most paranoid period of my life. This was 2010, a few months after Chelsea Manning was arrested for leaking a trove of documents to WikiLeaks. Coincidentally, Chelsea Manning had visited my house in the autumn of 2009; this was cause enough for suspicion from certain groups and frequent questions from reporters once the WikiLeaks story broke. Julian Assange was scheduled to give the keynote at HOPE, so you can imagine the atmosphere that year.&lt;/li&gt;
&lt;li&gt;Overall it was a fun experience regardless.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This year I finally made it back to HOPE. Things were a little different than last time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I flew in from Europe instead of driving from Boston.&lt;/li&gt;
&lt;li&gt;I was representing EFF and Freedom of the Press Foundation, two organizations that were almost-universally loved by the attendees.&lt;/li&gt;
&lt;li&gt;I co-presented two talks in front of overflowing rooms of people and got lots of audience feedback.&lt;/li&gt;
&lt;li&gt;I didn&amp;#8217;t have time to talk to all the people that I wanted to, much less all the people who were trying to ask me questions.&lt;/li&gt;
&lt;li&gt;Whereas last time I made it to several talks per day, this year I was working from 4 AM in the morning until whenever-I-had-to-give-a-presentation for the first 2/3rds of the conference, then running off to meetings or working shifts at the EFF/FPF booths. As a result, I made it to a total of 3 or 4 talks that weren&amp;#8217;t mine. 🙁&lt;/li&gt;
&lt;li&gt;It was eerie to have contributed to a &lt;a href=&#34;https://pressfreedomfoundation.org/securedrop&#34;&gt;project&lt;/a&gt; that kept getting name-dropped during the conference by the likes of Daniel Ellsberg and Barton Gellman. Literally dozens of people approached me to say that they wanted to help out with SecureDrop or set up an instance. Wow!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Predictably, it was strange to be a very-minor celebrity at a conference where I&amp;#8217;d previously felt like an outsider and deliberately tried to make myself invisible. 4 years ago, my experience in the last 4 days would have seemed impossible for a plethora of reasons: I wasn&amp;#8217;t a good public speaker*, I had a lot of self-doubt that I could contribute anything to the event,  I felt weird for not having the same interests and background as the vast majority of people at HOPE, I didn&amp;#8217;t know much about computers, I didn&amp;#8217;t think that I was working on anything interesting, etc.&lt;/p&gt;

&lt;p&gt;*Public speaking workshops are immensely helpful here; so does taking an introductory voice acting class.&lt;/p&gt;

&lt;p&gt;Despite the slowly-fading jetlag and piling exhaustion after a month of international travel, it felt nice to contribute back to a conference that had been an eye-opening experience to me the first time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Many thanks to the following people for working on presentations with me, giving last-minute feedback, and/or letting me sleep in their room: Parker Higgins, Bill Budington, Garrett Robinson, Trevor Timm, Runa Sandvik, James Dolan, Kevin Gallagher, Noah Swartz. Also thanks for Oliver Day for appointing me CSO of his company even though I haven&amp;#8217;t fixed the SSL cert for his website yet.&lt;/em&gt;&lt;/p&gt;

&lt;div style=&#34;width: 610px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;img src=&#34;https://pbs.twimg.com/media/Bs8Q1jgCYAANSFB.jpg&#34; alt=&#34;&#34; width=&#34;600&#34; height=&#34;398&#34; /&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Photo by Scott J. O&amp;#8217;Brien (@scottjobrien)
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Software Transparency: Part 1</title>
      <link>https://diracdeltas.github.io/blog/software-transparency/</link>
      <pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/software-transparency/</guid>
      <description>&lt;p&gt;Say that you want to &amp;#8220;securely&amp;#8221; acquire an app called EncryptedYo for &amp;#8220;securely&amp;#8221; communicating with your friends. You go to the developer&amp;#8217;s web site, which is HTTPS-only, and download a binary executable. Done!&lt;/p&gt;

&lt;p&gt;Perhaps if you&amp;#8217;re paranoid, you fetch the developer&amp;#8217;s GPG key, make sure that there&amp;#8217;s a valid trust path to it from your own key, verify the detached signature that they&amp;#8217;ve posted for the binary, and check that the checksum in the signature is the same as that of the binary that you&amp;#8217;ve downloaded before installing it.&lt;/p&gt;

&lt;p&gt;This is good enough as long as the only things you&amp;#8217;re worried about are MITM attacks on your network connection and compromise of the server hosting the software. It&amp;#8217;s not good enough if you&amp;#8217;re worried about any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The developer getting a secret NSA order to insert a backdoor into the software.&lt;/li&gt;
&lt;li&gt;The developer intentionally making false claims about the security of the software.&lt;/li&gt;
&lt;li&gt;The developer&amp;#8217;s build machine getting compromised with malware that injects backdoors during the packaging process (pre-signing) or even a malicious compiler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the above are *Very Real Worries* &amp;trade; that users should have when installing software. As a maintainer of a &lt;a href=&#34;https://www.eff.org/https-everywhere&#34;&gt;security-enhancing browser extension&lt;/a&gt; used by millions of people, I used to worry about the third one before HTTPS Everywhere had a deterministic build process (more on that below). If my personal laptop was compromised by a malicious version of zip that rewrote the static update-fetching URL in the HTTPS Everywhere source code before compressing and packaging it, literally millions of Firefox installations would be pwned within a few days if I didn&amp;#8217;t somehow detect the attack before signing the package (which is basically impossible to do in general).&lt;/p&gt;

&lt;p&gt;You might instinctively think that the scenarios above are at least *detectable* if the software is open source and has been well-audited, but that&amp;#8217;s not really true. Ex:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How do I know that some binary executable that I downloaded from &lt;a href=&#34;https://coolbinaryexecutables.com&#34;&gt;https://coolbinaryexecutables.com&lt;/a&gt; actually corresponds to the well-audited, peer-reviewed source code posted at &lt;a href=&#34;https://github.com/coolstuff/EncryptedYo.git?&#34;&gt;https://github.com/coolstuff/EncryptedYo.git?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How do I know that the binary executable that I downloaded is the same as the one that everyone else downloaded? In other words, how can I be sure that it&amp;#8217;s not my copy and *only* my copy that has a secret NSA backdoor?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So it looks like there&amp;#8217;s a problem because we usually install software from opaque binaries or compressed archives that have no guarantee of actually corresponding to the published, version-controlled source code. You might try to solve this by cloning the EncryptedYo repo and building it yourself. You can even fetch it over Tor and/or compare your local git HEAD to someone else&amp;#8217;s copy&amp;#8217;s if you want a stronger guarantee against a targeted backdoor.&lt;/p&gt;

&lt;p&gt;Unfortunately that&amp;#8217;s too much to ask the average person to do *every single time* they need to update the software, especially if EncryptedYo&amp;#8217;s target audience includes non-technical people (ex: Glenn Greenwald).&lt;/p&gt;

&lt;p&gt;This is why post-Snowden software developers need to start working on new code packaging and installation mechanisms that preserve &amp;#8220;software transparency,&amp;#8221; a phrase perhaps first used in this context by Seth Schoen. Software transparency, unlike open source by itself, is a guarantee that the packages you&amp;#8217;re installing or updating were created by building the published source code.&lt;/p&gt;

&lt;p&gt;(Side note: Software transparency has open source code as a prerequisite, but a similar concept that I&amp;#8217;ve been calling &amp;#8220;binary transparency&amp;#8221; can be applied to closed-source software as well. Binary transparency is a guarantee that the binary you&amp;#8217;re downloading is the same as the one that everyone else is downloading, but not that the binary is non-compromised. One way to get this is to compare the checksum of your downloaded binary gainst an out-of-band append-only cryptographically-verifiable log (phew) of binary checksums, similar to what Ben Laurie proposed in &lt;a href=&#34;http://www.links.org/?p=1262&#34;&gt;this blog post&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;In the last year, software transparency has finally started to become a front-and-center goal of some projects. Organizations like Mozilla and EFF are &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=885777&#34;&gt;beginning&lt;/a&gt; to &lt;a href=&#34;https://github.com/EFForg/https-everywhere/commit/e06a13a3283d93c96323970e1e43a897e4bfc944&#34;&gt;work&lt;/a&gt; on fully-reproducible build processes so that other people can independently build their software packages from source and make sure that their checksums are the same as the ones posted on mozilla.org or eff.org. Mike Perry of the Tor Project has &lt;a href=&#34;https://blog.torproject.org/blog/deterministic-builds-part-one-cyberwar-and-global-compromise&#34;&gt;written&lt;/a&gt; about the &lt;a href=&#34;https://blog.torproject.org/blog/deterministic-builds-part-two-technical-details&#34;&gt;painstaking, years-long process&lt;/a&gt; that it took to compile the Tor Browser Bundle deterministically inside a VM, but for many other software projects, the path to a reproducible build is as simple as &lt;a href=&#34;https://github.com/devrandom/gitian-builder/blob/master/bin/canon-zip&#34;&gt;normalizing timestamps&lt;/a&gt; in zip.&lt;/p&gt;

&lt;p&gt;Of course, a reproducible build proccess doesn&amp;#8217;t by itself impact the average user, who is unlikely to try to replicate the build process for Firefox for Android before installing it on their phone. But at least it means that if Mozilla started posting backdoored binaries because their build machine was compromised, some members of their open source development community could in theory detect the attack after-the-fact and raise suspicions. That&amp;#8217;s more than we could do before.&lt;/p&gt;

&lt;p&gt;IMO, every reasonably-paranoid software developer should be trying to adopt an independently reproducible build process. &lt;a href=&#34;https://gitian.org&#34;&gt;Gitian&lt;/a&gt; is a good place to start.&lt;/p&gt;

&lt;p&gt;(Part 2 of this series, which I haven&amp;#8217;t written yet, is probably going to be about implementing software transparency in a way that protects end users before they get pwned, which nobody is doing much of yet AFAIK. In particular, it would be nice to start discussing ways to enforce software transparency for resources loaded in a browser, in hopes that this will bring either some clarity or more shouting to the debate about whether in-browser crypto apps are a good idea.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a short story idea</title>
      <link>https://diracdeltas.github.io/blog/a-short-story-idea/</link>
      <pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/a-short-story-idea/</guid>
      <description>&lt;p&gt;In the year 2014, a startup in San Francisco builds an iPhone app that successfully cures people of heartbreak, but it requires access to every permission allowed on the operating system, including some that no app has ever requested before. It only costs $2.99 though.&lt;/p&gt;

&lt;p&gt;The app becomes hugely popular. The heartbroken protagonist of our story logs into the Apple iStore to download it, but because the Apple iStore doesn&amp;#8217;t support HTTP Strict Transport Security yet, an NSA FOXACID server intercepts the HTTP request and injects targeted iPhone malware into the download before Apple&amp;#8217;s servers have a chance to respond.&lt;/p&gt;

&lt;p&gt;However, the malware was actually targeted for the iPhone of an overseas political dissident. The only reason it reached our protagonist by mistake was because the first SHA-1 collision in recorded history was generated by the tracking cookies that NSA used to target the dissident.&lt;/p&gt;

&lt;p&gt;Meanwhile, the protagonist is wondering whether this app is going to work once it finishes installing. He smokes a cigarette and walks along a bridge in the pouring rain. Thousands of miles away, an NSA agent pinpoints his location and dispatches a killer drone from the nearest drone refueling station.&lt;/p&gt;

&lt;p&gt;The protagonist is silently assassinated in the dark while the entire scene is caught on camera by a roaming Google Street View car. The NSA realizes this and logs into Google&amp;#8217;s servers to delete the images, but not before some people have seen them thanks to CDN server caching.&lt;/p&gt;

&lt;p&gt;Nobody really wants to post these pictures, because they&amp;#8217;re afraid of getting DMCA takedown notices from Google Maps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>decentralized trustworthiness measures and certificate pinning</title>
      <link>https://diracdeltas.github.io/blog/decentralized-trustworthiness-measures-and-certificate-pinning/</link>
      <pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/decentralized-trustworthiness-measures-and-certificate-pinning/</guid>
      <description>&lt;p&gt;On the plane ride from Baltimore to SFO, I started thinking about a naming dilemma described by &lt;a href=&#34;https://en.wikipedia.org/wiki/Zooko_Wilcox-O%27Hearn&#34;&gt;Zooko&lt;/a&gt;. Namely (pun intended): it&amp;#8217;s difficult to architect name assignment systems that are simultaneously secure, decentralized, and human meaningful. &lt;a href=&#34;https://en.wikipedia.org/wiki/Zooko%27s_triangle&#34;&gt;Wikipedia&lt;/a&gt; defines these properties as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt;: The quality that there is one, unique and specific entity to which the name maps. For instance, &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_name&#34; title=&#34;Domain name&#34;&gt;domain names&lt;/a&gt; are unique because there is just one party able to prove that they are the owner of each domain name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decentralized&lt;/strong&gt;: The lack of a centralized authority for determining the meaning of a name. Instead, measures such as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_of_trust&#34; title=&#34;Web of trust&#34;&gt;Web of trust&lt;/a&gt; are used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Human-meaningful&lt;/strong&gt;: The quality of meaningfulness and memorability to the users of the naming system. Domain names and nicknaming are naming systems that are highly memorable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#8217;s pretty easy to make systems that satisfy two of the three. Tor Hidden Service (.onion) addresses are secure and decentralized but not human-meaningful since they look like random crap. Regular domain names like stripe.com are secure and human-meaningful but not decentralized since they rely on centralized DNS records. Human names are human-meaningful and decentralized but not secure, because multiple people can share the same name (that&amp;#8217;s why you can&amp;#8217;t just tell the post office to send $1000 to John Smith and expect it to get to the right person).&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s fun to think of how to take a toy system that covers two edges of Zooko&amp;#8217;s triangle and bootstrap it along the third until you get an almost-satisfactory solution to the naming dilemma. Here&amp;#8217;s the one I thought of on the plane:&lt;/p&gt;

&lt;p&gt;Imagine we live in a world with a special type of top-level domain called .ssl, which people have decided to make because they&amp;#8217;re sick of the NSA spying on them all the time. .ssl domains have some special requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All .ssl servers communicate only over SSL connections. Browsers refuse to send any data unencrypted to a .ssl domain.&lt;/li&gt;
&lt;li&gt;All .ssl domain names are just the hash of the server&amp;#8217;s SSL public key.&lt;/li&gt;
&lt;li&gt;The registrars refuse to register a domain name for you unless you show him/her a public key that hashes to that domain name.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This naming system wouldn&amp;#8217;t be human-meaningful, because people can&amp;#8217;t easily remember URLs like &lt;a href=&#34;https://2xtsq3ekkxjpfm4l.ssl&#34;&gt;https://2xtsq3ekkxjpfm4l.ssl&lt;/a&gt;. On the other hand, it&amp;#8217;s secure because the domain names are guaranteed to be unique (except in the overwhemingly-unlikely cases where two keys have the same hash or two servers happen to generate the same keypair). It&amp;#8217;s not truly decentralized, because we still use DNS to map domain names to IP addresses, but I argue that DNS isn&amp;#8217;t a point of compromise: if a MITM en route to the DNS server sends you to the wrong IP address, your browser refuses to talk to the server at that IP address because it won&amp;#8217;t show the right SSL certificate. This is an unavoidable denial-of-service vulnerability, but the benefit is that you detect the MITM attack immediately.&lt;/p&gt;

&lt;p&gt;Of course, this assumes we already have a decentralized way to advertise these not-very-memorable domain names. Perhaps they spread by trusted emails, or word-of-mouth, or business cards at hacker cons. But still, the fact that they&amp;#8217;re so long and complicated and non-human-meaningful opens up serious phishing vulnerabilities for .ssl domains!&lt;/p&gt;

&lt;p&gt;So, we&amp;#8217;d like to have petnames for .ssl domains to make them more memorable. Say that the owner of &amp;#8220;2xtsq3ekkxjpfm4l.ssl&amp;#8221; would like to have the petname &amp;#8220;forbes.ssl&amp;#8221;; how do we get everyone to agree on and use the petname-to-domain-name mappings? We could store the mappings in a distributed, replicated database and require that every client check several database servers and get consistent answers before resolving a petname to a domain name. But that&amp;#8217;s kinda slow, and maybe we&amp;#8217;re too cheap to set up enough servers to make this system robust against government MITM attacks.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a simpler and cheaper solution that doesn&amp;#8217;t require any extra servers at all: require that the distance between the hash of the petname and the hash of [server&amp;#8217;s public SSL key] + [nonce] is less than some number D &lt;a href=&#34;https://en.wikipedia.org/wiki/Zooko_Wilcox-O%27Hearn&#34;&gt;1&lt;/a&gt;. The server operator is responsible for finding a nonce that satisfies this inequality; otherwise, clients will refuse to accept the server&amp;#8217;s SSL certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Zooko_Wilcox-O%27Hearn&#34;&gt;1&lt;/a&gt; For purposes of this discussion, it doesn&amp;#8217;t really matter how we choose to measure the distance between two hashes, but it should satisfy the following: (1) two hashes that are identical have a distance of 0, and (2) the number of distinct hashes that are at distance N from a hash H0 should grow faster than linearly in N. We can pick Hamming distance, for example.&lt;/p&gt;

&lt;p&gt;In other words, the procedure for getting a .ssl domain now looks like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Alice wants forbes.ssl. She generates a SSL keypair and mines for a nonce that makes the hash of the public key plus nonce close enough to the hash of &amp;#8220;forbes&amp;#8221;.&lt;/li&gt;
&lt;li&gt;Once Alice does enough work to find a satisfactory nonce, she adds it as an extra field in her SSL certificate. The registrar checks her work and gives her forbes.ssl if the name isn&amp;#8217;t already taken and her nonce is valid.&lt;/li&gt;
&lt;li&gt;Alice sets up her site. She continues to mine for better nonces, in case she has adversaries who are secretly also mining for nonces in order to do MITM attacks on forbes.ssl in the future (more on this later).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bob comes along and wants to visit Alice&amp;#8217;s site.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bob goes to &lt;a href=&#34;https://forbes.ssl&#34;&gt;https://forbes.ssl&lt;/a&gt; in his browser.&lt;/li&gt;
&lt;li&gt;His browser sees Alice&amp;#8217;s SSL certificate, which has a nonce. Before finishing the SSL handshake, it checks that the distance D1_forbes between the hash of &amp;#8220;forbes&amp;#8221; and the hash of [SSL public key]+[nonce] is less than Bob&amp;#8217;s maximum allowed distance, D1. Otherwise it abandons the handshake and shows Bob a scary warning screen.&lt;/li&gt;
&lt;li&gt;If the handshake succeeds, Bob&amp;#8217;s browser caches Alice&amp;#8217;s SSL certificate and trusts it for some period of time T; if Bob sees a different certificate for Alice within time T, his browser will refuse to accept it, unless Alice has issued a revocation for her cert during that time.&lt;/li&gt;
&lt;li&gt;After time T, Bob goes to Alice&amp;#8217;s site again. His maximum allowed distance has gone down from D1 to D2 during that time. Luckily, Alice has been mining for better nonces, so D1_forbes is down to D2_forbes. Bob&amp;#8217;s browser repeats Step 2 with the new distances and decides whether or not to trust Alice for the next time interval T.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In reality, you probably wouldn&amp;#8217;t want to use this system with SSL certs themselves; rather, it&amp;#8217;d be better to use the nonces to strengthen trust-on-first-use in a key pinning system like TACK. That is, Alice would mine for a nonce that reduces the distance between the hash of &amp;#8220;forbes&amp;#8221; and the hash of [TACK Signing Key]+[nonce].&lt;/p&gt;

&lt;p&gt;For those unfamiliar with TACK, it&amp;#8217;s a system that allows SSL certificates to be pinned to a long-term TACK Signing Key provided by the site operator, which is trusted-on-first-sight and cached for a period of up to 30 days. Trust-on-first-use gets rid of the need to pin to a certificate authority, but it doesn&amp;#8217;t prevent a powerful adversary from MITM&amp;#8217;ing you every time you visit a site if they can MITM you the first time with a fake TACK Signing Key.&lt;/p&gt;

&lt;p&gt;The main usefulness of nonces for TACK Signing Keys is this: it makes broad MITM attacks much more costly. Not only does the MITM have to show you a fake key, but they have to show you one with a valid nonce. If they wanted to do this for every site you visit, keeping in mind that your acceptable distances go down over time, they&amp;#8217;d have to continuously mine for hundreds or thousands of domains.&lt;/p&gt;

&lt;p&gt;Not impossible, of course, but it&amp;#8217;s incrementally harder than just showing you a fake certificate.&lt;/p&gt;

&lt;p&gt;Another nice thing about this scheme is that Bob can decide to set different distance thresholds for different types of sites, depending on how &amp;#8220;secure&amp;#8221; they should be. He can pick a very low distance D_bank for his banking website, because he knows that his bank has a lot of computational resources to mine for a very good nonce. On the other hand, he picks a relatively high distance D_friend for his friend&amp;#8217;s homepage, because he knows that his friend&amp;#8217;s one-page site doesn&amp;#8217;t take any sensitive information.&lt;/p&gt;

&lt;p&gt;My intuition says that sites with high security needs (banks, e-commerce, etc.) also tend to have more computational resources for mining, but obviously this isn&amp;#8217;t true for sites like Wikileaks or some nonprofits that handle sensitive information liked Planned Parenthood. That&amp;#8217;s okay, because volunteers and site users can also mine for nonces! Ex: if Bob finds a better nonce for Alice, he can send it to her so that she has a stronger certificate.&lt;/p&gt;

&lt;p&gt;Essentially, this causes proof of trustworthiness to become decentralized: if I start a whistleblower site, I can run a crowd-mining campaign to ask thousands of volunteers around the world to help me get a strong certificate. I win as long as their combined computing power is greater than that of my adversaries.&lt;/p&gt;

&lt;p&gt;Of course, that last part isn&amp;#8217;t guaranteed. But it&amp;#8217;s interesting to think about what would happen either way.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aaron</title>
      <link>https://diracdeltas.github.io/blog/aaron/</link>
      <pubDate>Sun, 12 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/aaron/</guid>
      <description>&lt;p&gt;My co-worker Peter and I were riding the Caltrain from Mozilla to San Francisco a few days ago. A stranger sat down next to us and started talking. When I mentioned that we worked at EFF, his eyes lit up and he said, &amp;#8220;Oh! But you guys have won, right?&amp;#8221;&lt;/p&gt;

&lt;p&gt;Confused, I asked what he meant by that.&lt;/p&gt;

&lt;p&gt;He said, &amp;#8220;You defeated SOPA and PIPA a couple years ago. So you&amp;#8217;ve won.&amp;#8221;&lt;/p&gt;

&lt;p&gt;We laughed and explained that it didn&amp;#8217;t quite work like that. Peter said, &amp;#8220;Imagine this: you&amp;#8217;re a hero in a comic book. Every time you defeat your nemesis, a new one appears. This happens over and over again. It &lt;em&gt;has&lt;/em&gt; to work that way, because you live inside a comic book.&amp;#8221;&lt;/p&gt;

&lt;p&gt;And so it does. SOPA and PIPA are dead, but now there&amp;#8217;s NSA surveillance.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&amp;#8211;&lt;/p&gt;

&lt;p&gt;Aaron Swartz died a year ago today. I didn&amp;#8217;t know him well at all, but I could tell he believed that he had the power to make the world that he wanted to live in. That&amp;#8217;s not something that everyone believes about themselves; in fact, I think very few people live their lives as if it were true.&lt;/p&gt;

&lt;p&gt;When Aaron died, I felt like I had to do something. I didn&amp;#8217;t understand how to effectively fight for Internet freedom or why governments cared so much about restricting it, but I could see that Aaron&amp;#8217;s work had pivotal consequence for the future of human societies. I realized that if the wrong people gained control over the laws of the Internet, ordinary users would quickly lose their right to free speech on the greatest medium of expression that history has ever witnessed.&lt;/p&gt;

&lt;p&gt;I didn&amp;#8217;t know anything about code or laws or activism a year ago, but Aaron&amp;#8217;s death taught me that the fight for Internet freedom is lonely enough that it didn&amp;#8217;t matter who I was. One more person, one step forward.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&amp;#8211;&lt;/p&gt;

&lt;p&gt;I think SOPA/PIPA was the moment when we, the citizens of the Internet, realized that we could stand up and actually protect ourselves against historically-powerful institutions. As Peter once said, &amp;#8220;This was the moment when the Internet had grown up.&amp;#8221;&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s a famous shot of Aaron at a SOPA/PIPA protest, standing in front of a crowd of people and yelling at them, &amp;#8220;It’s easy sometimes to feel like you’re powerless, when you come out and march in the streets and nobody hears you. But I’m here to tell you today, you are powerful.”&lt;/p&gt;

&lt;p&gt;When the ratio of Congress members supporting SOPA/PIPA to those against it went from &lt;sup&gt;80&lt;/sup&gt;&amp;frasl;&lt;sub&gt;31&lt;/sub&gt; to &lt;sup&gt;65&lt;/sup&gt;&amp;frasl;&lt;sub&gt;101&lt;/sub&gt; overnight on January 18, 2012, we started to think that maybe Aaron had a point: if enough people show that they care about something, the government listens and the people win.&lt;/p&gt;

&lt;p&gt;Perhaps this strategy doesn&amp;#8217;t apply to the fight against mass surveillance, because it&amp;#8217;s a bigger and different sort of enemy than copyright. That&amp;#8217;s okay. Comic books aren&amp;#8217;t interesting without plot twists, I suppose.&lt;/p&gt;

&lt;p&gt;(Thanks to Jacobo Nájera for translating this post into Spanish: &lt;span class=&#34;moz-txt-link-freetext&#34;&gt;&lt;a href=&#34; http://metahumano.org/log/aaron-yan-zhu/&#34;&gt;&lt;a href=&#34;http://metahumano.org/log/aaron-yan-zhu/&#34;&gt;http://metahumano.org/log/aaron-yan-zhu/&lt;/a&gt;&lt;/a&gt;.)&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Suicide</title>
      <link>https://diracdeltas.github.io/blog/on-suicide/</link>
      <pubDate>Thu, 02 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/on-suicide/</guid>
      <description>&lt;p&gt;I lost four friends and relatives of friends to suicide this past year. I&amp;#8217;d prefer it if 2014 were different, and I&amp;#8217;ve been trying to think about how to make that happen.&lt;/p&gt;

&lt;p&gt;The least I could do is offer myself to anyone who feels alone otherwise: so, if you&amp;#8217;re at that point where you&amp;#8217;re thinking about hurting yourself, please please please call or write to me. I&amp;#8217;d really like that, even if you don&amp;#8217;t feel like it would help in any way, even if we&amp;#8217;ve never met.&lt;/p&gt;

&lt;p&gt;The more difficult thing for me to do, and the one that I&amp;#8217;ve been putting off for months, is to write a bit about what it feels like to reach that point. I won&amp;#8217;t claim that my experiences are universal in any way, but maybe some parts will resonate with others who&amp;#8217;ve gone to similar places.&lt;/p&gt;

&lt;p&gt;I would really not like to alarm anyone, so please just take everything here literally. Suicide is, unfortunately, stigmatized in such a way that it&amp;#8217;s extremely difficult to write about non-anonymously for fear of scaring friends. That seems like the start of a vicious cycle.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve never felt very attached to life, even when things are going great (as they are now). I have a theory that human beings naturally vary in how much they value their own lives, just like they vary in how much they value having things like fancy cars. People who are a couple standard deviations on the low-value-on-life side don&amp;#8217;t necessarily have worse lives than other people; it&amp;#8217;s just that they&amp;#8217;re not as attached to their lives. I think I&amp;#8217;m definitely pretty far on the low end.&lt;/p&gt;

&lt;p&gt;But on the other hand, there&amp;#8217;s a lot of people that I love in the world, and I have some sense that there are people in the world who feel the same way about me. So therefore I can understand that my death would make those people feel absolutely terrible, and I don&amp;#8217;t want that to happen.&lt;/p&gt;

&lt;p&gt;Sometimes I get sad and feel like the future isn&amp;#8217;t going to be better than the past. I think the word that gets used a lot for this kind of prolonged sadness is &amp;#8220;depression.&amp;#8221; When this happens, there&amp;#8217;s an absurd number of social barriers to talking about it openly. I feel like the number of friends I have, effectively, is suddenly reduced from dozens to one or two if I&amp;#8217;m lucky.&lt;/p&gt;

&lt;p&gt;So imagine that things are getting kind of hopeless and your effective friend number is down to two. You&amp;#8217;re thinking about talking to these two people about your not-doing-great, but you have to stop and think about:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Would this cause them unnecessary stress? Are they doing okay in their own lives?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you bring up allusions to suicide, would they do something dramatic against your will, such as call a hospital?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you do end up hurting yourself in some way, would they feel guilty about it forevermore because they couldn&amp;#8217;t save you when they had the chance?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What if they tell you that your life is great and people love you? How do you explain to them that even though those are facts, they have no relevance to how things are going inside your head?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What if they think that you&amp;#8217;re telling them this just because you want their attention or pity? Maybe that&amp;#8217;s what you&amp;#8217;re doing, subconsciously.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All these are fantastic reasons for you to keep silent. Also, there&amp;#8217;s the fear that someone will never see you in the same way again once you admit to them that you&amp;#8217;ve been looking at tables comparing various common methods of suffocation. It is generally not advantageous to come off as vulnerable or unstable.&lt;/p&gt;

&lt;p&gt;That all just sucks. It&amp;#8217;s shocking to me that anyone can learn to ask for help at all.&lt;/p&gt;

&lt;p&gt;Earlier this year, I didn&amp;#8217;t really feel like talking about suicide ever. Still, I observed thought patterns that were fascinating to me because they seemed unorthodox/taboo and yet rational in a way that often gets ignored in most conversations about suicide. I ended up writing them down in an essay and publishing them anonymously &lt;a href=&#34;https://thought.jottit.com&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After writing that piece, I found the nerve to talk to a few people. Those were some of the best conversations that I remember from 2013, and I think they&amp;#8217;ve given me a new understanding of how friendship acts as a psychological anchor.&lt;/p&gt;

&lt;p&gt;But there&amp;#8217;s places where that anchor doesn&amp;#8217;t fall deep enough. I get to those places sometimes and feel really alone and stuck. It helps to remind myself that things usually somehow end up getting better if I just wait it through.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>One year later</title>
      <link>https://diracdeltas.github.io/blog/one-year-later/</link>
      <pubDate>Thu, 28 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/one-year-later/</guid>
      <description>&lt;p&gt;One year ago, I started writing again out of panic. Humans are very adept at forgetting the feeling of panic, so the act of crystallizing it in sentences can be cathartic if you write slowly enough.&lt;/p&gt;

&lt;p&gt;Last November was a weird and difficult time for me. I remember spending the night of the twenty-third in a friend&amp;#8217;s childhood bedroom overlooking the idyllic frost-laced meadows of suburban Pennsylvania, wrapped in the mansion of an unfamiliar family that had adopted me for Thanksgiving. It was cold and late and Thanksgiving-y, in a way that amplifies certain negative thoughts about the hollowness of growing up and becoming something. I think I was at a point where those kinds of thoughts made me feel like I had swallowed one or two hummingbirds stuffed with bees stuffed with amphetamine. It was a little uncomfortable, so I stayed up all night and wrote about it.&lt;/p&gt;

&lt;p&gt;That was the night I decided that I would take a leave of absence from grad school at Stanford and spend a year doing as many different jobs as I could &lt;a href=&#34;https://zyan.scripts.mit.edu/blog/goodbye-cambridge/&#34;&gt;1&lt;/a&gt;. If I couldn&amp;#8217;t find a job that I was genuinely excited about by 11/23/2013, I would go back to getting a PhD in Physics.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zyan.scripts.mit.edu/blog/goodbye-cambridge/&#34;&gt;1&lt;/a&gt; For the record, I held a total of 4 paid jobs and 1.5 unpaid ones during that time.&lt;/p&gt;

&lt;p&gt;=====&lt;/p&gt;

&lt;p&gt;To be honest, it kind of sucked at first. I did an apt job of writing about it back in &lt;a href=&#34;https://zyan.scripts.mit.edu/blog/why-i-left-grad-school/&#34; target=&#34;_blank&#34;&gt;January&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The last month or so has been full of stress, disappointment, and self-doubt, the pains of a transition to life without externally-imposed structure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Life without structure in the form of school or employment was terrifying at first. I found it difficult to concentrate on reading. Most days I felt like I was losing in some form or another. My patterns of learning were slow and frustrating, and I started to doubt whether I was capable of accomplishing anything on my own. That&amp;#8217;s a really horrifying doubt to have about yourself, and I interpreted it as a sign to go rearrange some psychological furniture (not literal furniture, but only because I was couchsurfing at the time and had none).&lt;/p&gt;

&lt;p&gt;A couple days after that frankly-depressing blog post, I moved into my first San Francisco apartment and got my first post-graduation job: an internship that had some good moments (getting the company&amp;#8217;s IP blocked from Google a couple times) but mostly involved me feeling less like a human and more like a training set for advanced machine learning algorithms with each passing day.&lt;/p&gt;

&lt;p&gt;My second job was better. I got to write software.&lt;/p&gt;

&lt;p&gt;=====&lt;/p&gt;

&lt;p&gt;Winter passed into spring. I was getting close to 22. Sometimes I would run down Folsom St. all the way to the ocean, amazed that there was still light out at 7 pm. San Francisco in the dimming sunset is full of rushing cars, discarded coffee cups, and people eating salads. My bike was falling apart.&lt;/p&gt;

&lt;p&gt;Ever since quitting grad school, I&amp;#8217;d been getting good at leaving things behind: jobs, roommates, feelings of attachment to any particular time or place. Part of it was just that I had high standards for who I wanted to become.&lt;/p&gt;

&lt;p&gt;San Francisco didn&amp;#8217;t quite fit anymore, so I packed a backpack and got on a one-way flight to &lt;a href=&#34;https://zyan.scripts.mit.edu/blog/goodbye-cambridge/&#34;&gt;Boston&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;=====&lt;/p&gt;

&lt;p&gt;Once I started travelling, it was hard to stop. The crinkled packaging of snack food at a gas station convenience store is basically equivalent to the wrapping that airlines put around cheap disposable pillows. Both are addictive because they remind you of the miles you have to go.&lt;/p&gt;

&lt;p&gt;I did this: Boston -&amp;gt; Delaware -&amp;gt; Pittsburg -&amp;gt; Boston -&amp;gt; Austin -&amp;gt; &lt;a href=&#34;https://zyan.scripts.mit.edu/blog/marfa-tx/&#34;&gt;Marfa, TX&lt;/a&gt; -&amp;gt; El Paso -&amp;gt; Joshua Tree -&amp;gt; LA -&amp;gt; Big Sur -&amp;gt; SF -&amp;gt; Seattle -&amp;gt; SF -&amp;gt; a tiny &lt;a href=&#34;https://zyan.scripts.mit.edu/blog/quest-ce-que-le-fuck/&#34;&gt;village&lt;/a&gt; in France -&amp;gt; Amsterdam -&amp;gt; SF&lt;/p&gt;

&lt;p&gt;=====&lt;/p&gt;

&lt;p&gt;Things got better once I returned to SF. I was interning for EFF over the summer and loved the atmosphere and the people there enough to stay put. I didn&amp;#8217;t have a place to live anymore in SF, so I didn&amp;#8217;t sleep in the same place two nights in a row for over a month.&lt;/p&gt;

&lt;p&gt;=====&lt;/p&gt;

&lt;p&gt;Computer security and encryption became intensely fascinating. I didn&amp;#8217;t know much to start with, so I read aggressively on subways. My interest probably came partially from my hatred of power imbalances, especially invisible ones. A lot of power belongs to those who made security decisions about software, and those decisions are hardly transparent in most cases.&lt;/p&gt;

&lt;p&gt;This seems wrong to me.&lt;/p&gt;

&lt;p&gt;Side note: Designing an account management system for a website teaches you that code is supplanting many of the historical functions of legal frameworks. You&amp;#8217;d think that would mean that people would write tests.&lt;/p&gt;

&lt;p&gt;=====&lt;/p&gt;

&lt;p&gt;I was in Berlin for the first time last week. It was drizzling near-freezing Berlin rain for eight days before a thumbprint of blue pressed through the clouds, but none of that matters when you&amp;#8217;re jetlagged and ducking through graffiti-lined streets asking drug dealers where to get a sandwich at 3 AM.&lt;/p&gt;

&lt;p&gt;It was in a corner of a dimly-lit Indian restaurant in Kreuzberg one night that I got an email from &lt;a href=&#34;https://eff.org&#34;&gt;EFF&lt;/a&gt;. It said, thanks for pointing out Google&amp;#8217;s &lt;a href=&#34;https://zyan.scripts.mit.edu/blog/debunking-googles-hsts-claims/&#34;&gt;HSTS bug&lt;/a&gt;. Also we&amp;#8217;d like to offer you a job as a full-time technologist.&lt;/p&gt;

&lt;p&gt;The next day was November twenty-third, exactly one year after I promised myself exactly one year to find a job that I was excited about.&lt;/p&gt;

&lt;p&gt;======&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m proud to announce that I accepted EFF&amp;#8217;s offer today and will be starting work there as a staff technologist after Thanksgiving. It&amp;#8217;s been a long and challenging year, but I can&amp;#8217;t wait to see where it goes next.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Passwords, user models, and Adobe’s mistake</title>
      <link>https://diracdeltas.github.io/blog/passwords-user-models-and-adobes-mistake/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/passwords-user-models-and-adobes-mistake/</guid>
      <description>&lt;p&gt;&lt;span class=&#34;userContent&#34;&gt;The following is a phenomenal story for illustrating how real-life cybersecurity disasters come from a combination of technical and social failures. In this case, both were necessary for making things as catastrophic as they were.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A couple &lt;span class=&#34;text_exposed_show&#34;&gt;days ago, it was &lt;a href=&#34;http://arstechnica.com/security/2013/11/how-an-epic-blunder-by-adobe-could-strengthen-hand-of-password-crackers/&#34;&gt;announced&lt;/a&gt; that 130 million Adobe account credentials were compromised by a cyberattack. (If you are an Adobe customer, please make sure you&amp;#8217;ve changed your password on any account that shared the same password.) There&amp;#8217;s been a file circulating around the Internet that contains the email address, encrypted password, and unencrypted password hint for all these accounts. It&amp;#8217;s not too hard to find.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The first interesting thing we learned from this file is that Adobe didn&amp;#8217;t salt and hash their passwords before storing. Instead, they used a well-known symmetric encryption algorithm (3DES, ECB-mode) with the same secret key for every account. Even without knowing the secret key, it&amp;#8217;s not hard to recover plaintext passwords with high confidence using basic statistics. Simple example: The encrypted password that appears most often in the dataset is probably going to decipher to &amp;#8220;123456&amp;#8221; or &amp;#8220;password&amp;#8221;. For this particular dataset, knowing that alone gives you the password for 2+ million accounts. (I&amp;#8217;ll explain how you can avoid statistical attacks like this one by salting/hashing in a footnote below.)&lt;/p&gt;

&lt;p&gt;The other interesting part is the password hints. A staggering number of people have password hints that are literally, &amp;#8220;pwd is 123456&amp;#8221;, which helps confirm some of the password guesses that we can make by statistical analysis. My friend Nick Semenkovich posted &lt;a href=&#34;http://nick.semenkovich.com/adobe-breach-sanitized.csv.gz&#34;&gt;a sanitized version of the full user dataset&lt;/a&gt; (.gz, 1.1G) with emails redacted, which I filtered into a much shorter list of 8262 &lt;a href=&#34;http://web.mit.edu/zyan/Public/adobe_sanitized_passwords_with_bad_hints.txt&#34; target=&#34;_blank&#34;&gt;lines-that-might-contain-the-actual-plaintext-password&lt;/a&gt; using grep -Ei &amp;#8216;\s+(password|pwd?)\s*(is|==?|:)&amp;#8217;.&lt;/p&gt;

&lt;p&gt;If you take a look at the list, you&amp;#8217;ll see an astonishing number of password hints that either seem to give the actual password or say something like, &amp;#8220;Password is the same as for Gmail.&amp;#8221; The latter is especially bad because if your password is fairly common, I can probably figure it out from statistical analysis and then login to your email account.&lt;/p&gt;

&lt;p&gt;Essentially, this is a situation where if &lt;strong&gt;EITHER&lt;/strong&gt; Adobe engineers implemented secure password and password hint obfuscation &lt;strong&gt;OR&lt;/strong&gt; every Adobe user created perfectly random passwords and secure password hints (== probably no hint at all), things would be mostly okay despite the database breach.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t want to be presumptuous about why Adobe didn&amp;#8217;t follow recommended password storage protocols, but it seems that the twofold lesson here is that engineers need to have a realistic user model and users need to have less trust in engineers to protect them.&lt;/p&gt;

&lt;p&gt;====&lt;/p&gt;

&lt;p&gt;A quick primer on salting and hashing passwords:&lt;/p&gt;

&lt;p&gt;&lt;span data-ft=&#34;{&amp;quot;tn&amp;quot;:&amp;quot;K&amp;quot;}&#34; data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3]&#34;&gt;&lt;span data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0]&#34;&gt;&lt;span data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[0]&#34;&gt;Hashing for password storage is a pretty magical thing. Unlike encryption (which is an invertible function once you have the secret key), usually the only way to get the input to a secure hash function (aka: the user password) from the output (aka: the password ciphertext) is to brute-force. Hash functions are at least half-magical because similar inputs get mapped to completely different outputs except by coincidence. &lt;/span&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[1]&#34; /&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[2]&#34; /&gt;&lt;span data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[3]&#34;&gt;If all the users of your website had completely random passwords all the time, you could feel free to post the hashes of their passwords publicly as long as you trusted the hash function, because there&amp;#8217;s no easy way to undo a secure hashing process. Something like bcrypt or scrypt with a high work factor.&lt;/span&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[4]&#34; /&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[5]&#34; /&gt;&lt;span data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[6]&#34;&gt;The problem is that humans tend to reuse strings exactly for passwords, so if we get a database dump we can do statistical deductions and grab the nearest table of precomputed hashes for common strings. So we need adjust our user model from &amp;#8220;people who make perfectly random passwords&amp;#8221; to &amp;#8220;people who might just use &amp;#8216;password&amp;#8217;.&amp;#8221; &lt;/span&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[7]&#34; /&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[8]&#34; /&gt;&lt;span data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[9]&#34;&gt;Then the solution is pretty simple: we just generate a random string for each user when they make their password (a &amp;#8220;salt&amp;#8221;) and append/prepend the salt to their password before hashing. We have to store the salt in our database alongside each user&amp;#8217;s salted-hashed password, but that&amp;#8217;s fine because it reveals no information about the plaintext password.&lt;/span&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[10]&#34; /&gt;&lt;br data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[11]&#34; /&gt;&lt;span data-reactid=&#34;.r[2p3mo].[1][4][1]{comment10201186249720872_5217673}.[0].{right}.[0].{left}.[0].[0].[0][3].[0].[12]&#34;&gt;Note that you should never use the same salt for multiple users; otherwise you end up in basically the same situation as Adobe when someone gets your password database dump.&lt;br /&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Cypherpunks 2.0</title>
      <link>https://diracdeltas.github.io/blog/thoughts-on-cypherpunks-2-0/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/thoughts-on-cypherpunks-2-0/</guid>
      <description>&lt;p&gt;This is a post about fear. It&amp;#8217;s easy to write about things that everyone says they are afraid of, but less so about nightmares that you suspect might just be your own. The latter is much more distressing and also easier to push out of the way. I&amp;#8217;ll try to elaborate on something that has been in the back of my mind.&lt;/p&gt;

&lt;p&gt;Last night, I went to a talk by my friend &lt;a href=&#34;https://twitter.com/eqe&#34; target=&#34;_blank&#34;&gt;Andy&lt;/a&gt; titled, &amp;#8220;&lt;a href=&#34;http://adi.is/s/cpunk20/#1&#34; target=&#34;_blank&#34;&gt;Cypherpunks 2.0&lt;/a&gt;.&amp;#8221; Andy thinks that there&amp;#8217;s been two major waves of activity in the &lt;a href=&#34;http://en.wikipedia.org/wiki/Cypherpunk#Main_principles&#34; target=&#34;_blank&#34;&gt;cypherpunk&lt;/a&gt; movement: the one that peaked in the 90s and put technologies like PGP, SSL, OTR, and Tor in the hands of ordinary people (at least in the U.S.); and the one that started this summer in response to the Snowden leaks.&lt;/p&gt;

&lt;p&gt;Andy is hopeful. He points out that Cypherpunks 2.0 has dozens of active crypto and techno-activism mailing lists, as well as IRL meetups like Techno-Activism Third Mondays, CCC, and Cryptoparty. On the technology front, we&amp;#8217;re watching projects like Tahoe-LAFS, CryptoCat, Whonix, and Tails become what John Gilmore referred to as the physics and mathematics that guarantees a fair society when legal systems are insufficient (as they typically are).&lt;/p&gt;

&lt;p&gt;There was a slide in Andy&amp;#8217;s talk that really stuck with everyone in the audience. It read:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Cypherpunks 1.0] &amp;#8220;Look at this utopia we can build, using cryptography!&amp;#8221;&lt;/p&gt;

&lt;p&gt;[Cypherpunks 2.0] &amp;#8220;Look at this dystopia we have built, using cryptography!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And yes, Cypherpunks 2.0 feels less like a revolution for utopia through free cryptography and more like an arms race against Orwellian governments that fundamentally disagree with us on whether privacy is a human right. Cypherpunks today don&amp;#8217;t talk about winning, for the most part. We talk about staying above water. We say that the best we can do is to make mass surveillance both illegal and extremely difficult through maximal use of end-to-end encryption. We&amp;#8217;re doing the best we can to prevent and protect people from the hells of targeted surveillance if they are ever so unlucky, but it&amp;#8217;s hard to make promises when you don&amp;#8217;t know if your adversary model is close to realistic.&lt;/p&gt;

&lt;p&gt;Last night, I realized that every article I had read about the Snowden leaks either implicitly or explicitly suggested that we should be afraid, because the Orwellian dystopia is already here. Everyone is being watched all the time. Our crypto abilities are decades behind those of the government. Free societies cannot exist in such a state. Etc.&lt;/p&gt;

&lt;p&gt;None of the above distresses me, though. Those of us who identify as cypherpunks or simply people who dislike surveillance are in a better spot than before. Every week, we learn a bit more about how government surveillance works, and we adjust our tactics accordingly. Pull, push, merge.&lt;/p&gt;

&lt;p&gt;The part that I am truly, deeply, unapologetically terrified of is that we&amp;#8217;ll step away from our laptops, take a look at American society as a whole, and find that almost nobody cares.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve had this fear in some form or another for a decade. In 2006, I was 15, rather cynical, and planning to drop out of public school in inner-city Saint Louis. I wanted generational identity instead of Facebook wall posts, protests instead of biweekly third-period Home Economics. There was nothing I despised more than apathy.&lt;/p&gt;

&lt;p&gt;That year, I purchased the first book I ever bought for myself. It was &lt;em&gt;Amusing Ourselves to Death&lt;/em&gt;, an ever-relevant work of nonfiction written by Neil Postman in 1985. The foreword has a stunningly prophetic passage that, like a boomerang, swings out of the far blue distance and dares us to duck fast:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; &amp;hellip; we had forgotten that alongside Orwell&amp;#8217;s dark vision, there was another- slightly older, slightly less well known, equally chilling: Aldous Huxley&amp;#8217;s &amp;#8220;Brave New World.&amp;#8221; Contrary to common belief even among the educated, Huxley and Orwell did not prophesy the same thing. Orwell warns that we will be overcome by an externally imposed oppression. But in Huxley&amp;#8217;s vision, no Big Brother is required to deprive people of their autonomy, maturity and history. As he saw it, people will come to love their oppression, to adore the technologies that undo their capacities to think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Postman, in painful detail, considered the possibility that Huxley, not Orwell, was right. Nonetheless, nobody really wants to talk about Huxley. Orwellian surveillance is, in a certain light, a sexy thing to fight against. The apathy of the average person who spends 4 hours per day watching reality TV is not. For most of us, it&amp;#8217;s much more fun to hack on Tor than to explain to a grocery store cashier why they should support free software projects that are far less usable than Dropbox.&lt;/p&gt;

&lt;p&gt;My fear is that outside of the technological elite, convenience will perpetually win over privacy. I&amp;#8217;m afraid that if staying alive in the war against surveillance relies on winning the war against apathy, Cypherpunks 2.0 is moving forward in the wrong direction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On artificially-bounded futures</title>
      <link>https://diracdeltas.github.io/blog/on-artificially-bounded-futures/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://diracdeltas.github.io/blog/on-artificially-bounded-futures/</guid>
      <description>&lt;p&gt;I flew back to MIT recently for the GNU 30th Anniversary Celebration and Hackathon, thanks to a generous travel scholarship from the Free Software Foundation. All I had to do was never, ever run any proprietary javascript in my browser and something something something about firstborns. Seemed like a net win.&lt;/p&gt;

&lt;p&gt;The hackathon itself was fun. I spent most of it teaching people about privacy-enhancing tools like GnuPG and realizing that privacy-enhancing tools are intimidating, even to MIT computer science PhD students. Bad user interfaces are astonishingly powerful, and nothing cripples the human spirit like a poorly-written manpage.&lt;/p&gt;

&lt;p&gt;I also gave a short talk to about ~30 undergrads titled, &amp;#8220;Things you should be afraid of that you probably didn&amp;#8217;t know about.&amp;#8221; The alternate title was, &amp;#8220;Useful self-preservation tactics in surveillance states.&amp;#8221; The alternate alternate title was, &amp;#8220;On the possibility of preserving student culture at MIT.&amp;#8221; I admit I was trying to get more people to show up on a Friday night.&lt;/p&gt;

&lt;p&gt;The problem was that, after an unexpected adventure in NYC the day before followed by an untimely laptop battery failure, I had barely twenty minutes to prep for the talk. So I went for a short run around the Charles River and formulated some thoughts. They went something like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Surveillance is bad. Do MIT undergrads care? Or are they still trying to implement metacircular evaluators in Scheme?&lt;/li&gt;
&lt;li&gt;DO NOT LET PEOPLE GIVE INTO CRYPTO-NIHILISM. Show them that we can only fight what we know.&lt;/li&gt;
&lt;li&gt;Privacy, if it actually exists, must belong to a community. Privacy that belongs to individuals is necessary but not sufficient.&lt;/li&gt;
&lt;li&gt;Ethical choices are painful and often ambiguous. Say you&amp;#8217;re the CEO of a company that makes a groundbreaking app that reduces vehicle emissions by 90% in the US. In order to do so, you need to collect data on where everyone&amp;#8217;s cars are located at all times. Then one day the government puts you in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Qwest&#34;&gt;position&lt;/a&gt; where your choices are to either (secretly) give them years and years of private user data or let the company shut down (and lose all your money). What do you do?&lt;/li&gt;
&lt;li&gt;Imagine if the MIT administration wiretapped all student communications on the Internet and forced every mailing list to contain an administrator. Imagine the student response. Now imagine the same situation at the national scale. This is a useful exercise to brainstorm realistic ways of fighting problems that seem too large and abstract for us to think about at first (ex: mass unchecked government surveillance).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To my surprise, the talk went over rather well. People asked lots of excellent questions, like what kind of tinfoil hat to buy. Phew.&lt;/p&gt;

&lt;p&gt;Another thing that has come up a lot on this trip is the idea of having a career. As much as I feel uncomfortable about it sometimes, I can&amp;#8217;t help but admit that the topic of What To Do In Life has been on my mind lately. The annual MIT Career Fair was a week ago, a bizarre anti-celebratory festival during the first week of classes where hundreds of companies try to recruit students by giving them free Rubix cubes. This year, one courageous sophomore wrote an &lt;a href=&#34;http://tech.mit.edu/V133/N39/ogrady.html&#34;&gt;opinion article&lt;/a&gt; in the school newspaper about how  &lt;span class=&#34;userContent&#34;&gt;the Career Fair is useless for inspiring faith in the student population&amp;#8217;s ability to give a fuck about problems other than making cool-but-also-profitable&lt;span class=&#34;text_exposed_show&#34;&gt; technology and making hella cash.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Obviously this is a thorny issue wrapped in questions of whether the author has properly normalized for her own privilege (she probably has) and if large tech companies like FB/Apple/Google are already doing the maximal amount of good for humanity that they can while remaining profitable (they probably aren&amp;#8217;t), BUT it was still surprising that most critical comments essentially said: &amp;#8220;Stop looking down on other people / some of us need to make a living / not all corporations are completely evil.&amp;#8221; Multiple commenters accused the author of &amp;#8220;entitlement&amp;#8221;, which seems like a ridiculous term to cast as an insult (aren&amp;#8217;t we all entitled to pursuit of happiness?).&lt;/p&gt;

&lt;p&gt;Disliking the percentage of commenters who were unfairly bashing on the author, I wrote an uncharacteristically optimistic comment for someone who doesn&amp;#8217;t have a consistent job:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post was entirely justified and necessary. (Minus the fact that Quizlet probably doesn&amp;#8217;t deserve to be on that list, as RJ pointed out.)&lt;/p&gt;

&lt;p&gt;A number of the criticizing comments here have argued that companies like Apple and Facebook, on their way to making massive profits, ultimately spawn technologies that do good for the world; furthermore, even MIT students need to support themselves day-to-day regardless of their greater goals. But I think a salient counter-argument is that MIT grads can and absolutely must hold themselves to a higher standard than what these companies represent.&lt;/p&gt;

&lt;p&gt;What I am implicitly saying is that (1) there are greater problems that humanity faces than how to get people to trigger certain javascript callbacks that generate ad revenue, and (2) people with the intellect and stamina to lead technological revolutions have a near-moral responsibility to solve these greater problems. The fact is that most MIT graduates can find a job and figure out a way to support themselves in most circumstances, which means they have a rare privilege among young people: the ability to take on great risks and be okay if they fail.&lt;/p&gt;

&lt;p&gt;In practice, a dismayingly small percentage of MIT graduates use this privilege for tackling the hardest and most valuable problems of our generation. Climate change is a fine example, given that the lower limit of the time it&amp;#8217;ll take for atmospheric methane to collapse the global economy is on the order of &lt;a href=&#34;http://www.theguardian.com/environment/2013/jul/24/arctic-thawing-permafrost-climate-change&#34;&gt;decades&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even those of us who work as software engineers and tech CEO&amp;#8217;s usually fail to address the question of whether we are making technology for a world where knowledge is free and accessible to everyone, or a world where governments and corporations can freely intrude on the private communications of every single person. Too often, we generate technology that is groundbreaking and astonishing without conscientiously addressing their potential to destroy civil liberties and strip away basic human rights. We can and must exert more pull over the ethical consequences of our innovation.&lt;/p&gt;

&lt;p&gt;It is absolutely our moral responsibility to try to make the world we want to live in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I really hope I didn&amp;#8217;t make all of that up.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>