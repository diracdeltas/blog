<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>encrypt the web on discrete blogarithm</title>
    <link>https://blog.azuki.vip/categories/encrypt-the-web/</link>
    <description>Recent content in encrypt the web on discrete blogarithm</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 07 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.azuki.vip/categories/encrypt-the-web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pseudorandom podcast series, episode 1</title>
      <link>https://blog.azuki.vip/pseudorandom-podcast-series-episode-1/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/pseudorandom-podcast-series-episode-1/</guid>
      <description>The combination of my roommate starting a Rust podcast and a long, animated conversation with a (drunk) storyteller last night caused me to become suddenly enamored with the idea of starting my own lil‚Äô podcast. Lately I keep thinking about how many spontaneous, insightful conversations are never remembered, much less entombed in a publicly-accessible server for posterity. So a podcast seemed like an excellent way to share these moments without spending a lot of time writing (I‚Äôm a regrettably slow writer).</description>
    </item>
    
    <item>
      <title>tls everything</title>
      <link>https://blog.azuki.vip/tls-everything/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/tls-everything/</guid>
      <description>Yesterday the W3C Technical Architecture Group published a new finding titled, ‚ÄúThe Web and Encryption.‚Äù In it, they conclude:
‚Äú. . . the Web platform should be designed to actively prefer secure origins ‚Äî typically, by encouraging use of HTTPS URLs instead of HTTP ones. Furthermore, the end-to-end nature of TLS encryption must not be compromised on the Web, in order to preserve this trust.‚Äù
To many HTTPS Everywhere users like myself, this seemed a decade or so beyond self-evident.</description>
    </item>
    
    <item>
      <title>certificate transparency for PGP?</title>
      <link>https://blog.azuki.vip/certificate-transparency-for-pgp/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/certificate-transparency-for-pgp/</guid>
      <description>Yesterday, Prof. Matthew Green wrote a nice blog post about why PGP must die. Ignoring the UX design problem for now, his four main points were: (1) the keys themselves are too unwieldy, (2) key management is hard, (3) the protocol lacks forward secrecy, and (4) the crypto is archaic/non-sane by default.
Happily, (1) and (4) can be solved straightforwardly using more modern crypto primitives like Curve25519 and throwing away superfluous PGP key metadata that comes from options that are ignored 99.</description>
    </item>
    
    <item>
      <title>Software Transparency: Part 1</title>
      <link>https://blog.azuki.vip/software-transparency/</link>
      <pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/software-transparency/</guid>
      <description>Say that you want to ‚Äúsecurely‚Äù acquire an app called EncryptedYo for ‚Äúsecurely‚Äù communicating with your friends. You go to the developer‚Äôs web site, which is HTTPS-only, and download a binary executable. Done!
Perhaps if you‚Äôre paranoid, you fetch the developer‚Äôs GPG key, make sure that there‚Äôs a valid trust path to it from your own key, verify the detached signature that they‚Äôve posted for the binary, and check that the checksum in the signature is the same as that of the binary that you‚Äôve downloaded before installing it.</description>
    </item>
    
    <item>
      <title>don‚Äôt forget to secure cookies ppl</title>
      <link>https://blog.azuki.vip/wordpress-fail/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/wordpress-fail/</guid>
      <description>Update (5/28/14): Regrettably, most of the stories covering this blog post have been all ‚ÄúOMG EVERYTHING IS BROKEN‚Äù rather than ‚ÄúHere‚Äôs how to make things better til WordPress rolls out a fix‚Äù (which I humbly believe will take a while to *fully* fix, given that their SSL support is so patchy). So, given that most people reading this are probably coming from one of those articles, I think it‚Äôs important to start with the actionable items that people can do to mitigate cookie-hijacking attacks on WordPress:</description>
    </item>
    
    <item>
      <title>How to make a less-leaky Heartbleed bandage</title>
      <link>https://blog.azuki.vip/some-heartbleed-tips/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/some-heartbleed-tips/</guid>
      <description>Mashable just put out a nice-looking chart showing ‚ÄúPasswords You Need to Change Right Now‚Äù change in light of the recent Heartbleed carnage. However, it has some serious caveats that I wanted to mention:
It‚Äôs probably better to be suspicious of companies whose statements are in present-tense (ex: ‚ÄúWe have multiple protections‚Äù or even ‚ÄúWe were not using OpenSSL‚Äù). The vulnerability existed since 2011, so even if a service was protected at the time of its disclosure 3 days ago, it could be have been affected at some point long before then.</description>
    </item>
    
    <item>
      <title>decentralized trustworthiness measures and certificate pinning</title>
      <link>https://blog.azuki.vip/decentralized-trustworthiness-measures-and-certificate-pinning/</link>
      <pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/decentralized-trustworthiness-measures-and-certificate-pinning/</guid>
      <description>On the plane ride from Baltimore to SFO, I started thinking about a naming dilemma described by Zooko. Namely (pun intended): it‚Äôs difficult to architect name assignment systems that are simultaneously secure, decentralized, and human meaningful. Wikipedia defines these properties as:
Secure: The quality that there is one, unique and specific entity to which the name maps. For instance, domain names are unique because there is just one party able to prove that they are the owner of each domain name.</description>
    </item>
    
    <item>
      <title>The most subtle joke I‚Äôve made all year</title>
      <link>https://blog.azuki.vip/the-most-subtle-joke-ive-made-all-year/</link>
      <pubDate>Tue, 31 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/the-most-subtle-joke-ive-made-all-year/</guid>
      <description> Dan Auerbach: Any doctor can prescribe any medication to anyone. That is a broken system. Yan: Medication needs to be able to do doctor-pinning. </description>
    </item>
    
    <item>
      <title>Debunking Google‚Äôs HSTS claims</title>
      <link>https://blog.azuki.vip/debunking-googles-hsts-claims/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/debunking-googles-hsts-claims/</guid>
      <description>**Disclaimer**: This post was published before I started working at EFF, hence some stylistic mistakes (calling it ‚Äúthe EFF‚Äù rather than just ‚ÄúEFF‚Äù) are excusable and left uncorrected. üôÇ
Two days ago, the EFF published a report tiled, ‚ÄúEncrypt the Web Report: Who‚Äôs Doing What.‚Äù The report included a chart that rated several large web companies on how well they were protecting user privacy via recommended encryption practices for data in transit.</description>
    </item>
    
    <item>
      <title>Thoughts on Cypherpunks 2.0</title>
      <link>https://blog.azuki.vip/thoughts-on-cypherpunks-2-0/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/thoughts-on-cypherpunks-2-0/</guid>
      <description>This is a post about fear. It‚Äôs easy to write about things that everyone says they are afraid of, but less so about nightmares that you suspect might just be your own. The latter is much more distressing and also easier to push out of the way. I‚Äôll try to elaborate on something that has been in the back of my mind.
Last night, I went to a talk by my friend Andy titled, ‚ÄúCypherpunks 2.</description>
    </item>
    
    <item>
      <title>Summertime, and the HTTP traffic sniffing is easy</title>
      <link>https://blog.azuki.vip/summertime-and-the-http-traffic-sniffing-is-easy/</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/summertime-and-the-http-traffic-sniffing-is-easy/</guid>
      <description>So it happens that every time you access a URL that starts with ‚Äúhttp://‚Äù, anyone on your local network can see what you‚Äôre doing with almost no effort worth writing about. This includes the page itself as well as any information that you‚Äôre transferring, like credit card numbers and passwords (which are hopefully encrypted). It‚Äôs worth reiterating that this isn‚Äôt difficult at all, even if your network is WPA2-protected, as most supposedly-secure WiFi networks are nowadays.</description>
    </item>
    
    <item>
      <title>Some thoughts on Facebook implementing forward secrecy</title>
      <link>https://blog.azuki.vip/some-thoughts-on-facebook-implementing-forward-secrecy/</link>
      <pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.azuki.vip/some-thoughts-on-facebook-implementing-forward-secrecy/</guid>
      <description>Last month, CNET announced that Facebook is working on implementing a property called forward secrecy in its encryption of user data. The article is pretty long, but the gist of it is:
Forward secrecy is good news, at least theoretically. Right now, when you send data to Facebook‚Äôs servers, your data gets encrypted so that someone who intercepts your data can‚Äôt read it unless they have Facebook‚Äôs secret key. However, if an eavesdropper is recording your messages now and somehow gets the secret key in the future, they can go back and decrypt all your encrypted communications.</description>
    </item>
    
  </channel>
</rss>
